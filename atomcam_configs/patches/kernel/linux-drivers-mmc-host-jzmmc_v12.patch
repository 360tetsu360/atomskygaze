diff -urp a/drivers/mmc/host/jzmmc_v12.c b/drivers/mmc/host/jzmmc_v12.c
--- a/drivers/mmc/host/jzmmc_v12.c	2021-11-17 21:10:58.000000000 +0900
+++ b/drivers/mmc/host/jzmmc_v12.c	2021-11-17 21:13:17.000000000 +0900
@@ -9,8 +9,8 @@
  * published by the Free Software Foundation.
  */
 
-#define VERBOSE_DEBUG
-#define DEBUG
+//#define VERBOSE_DEBUG
+//#define DEBUG
 #include <linux/platform_device.h>
 #include <linux/mmc/host.h>
 #include <linux/mmc/card.h>
@@ -38,7 +38,6 @@
 #define TIMEOUT_PERIOD		500	/* msc operation timeout detect period */
 #define PIO_THRESHOLD		64	/* use pio mode if data length < PIO_THRESHOLD */
 #define CLK_CTRL
-#define IO_SAMPLE_PERIOD_MS	2000
 
 enum {
 	EVENT_CMD_COMPLETE = 0,
@@ -135,10 +134,8 @@ struct jzmmc_host {
 	spinlock_t		lock;
 	unsigned int		double_enter;
 	int				timeout_cnt;
-	u32			sample_time;
-	u32			sample_rdata;
-	u32			sample_wdata;
 	int         timeout_state;
+	struct proc_dir_entry *proc;
 };
 
 #define ERROR_IFLG (				\
@@ -948,7 +945,7 @@ static void jzmmc_request(struct mmc_hos
 	 * It never happens in design, but we add BUG_ON here to prevent it.
 	 */
 	if ((host->state != STATE_IDLE) && (mrq->data != NULL)) {
-		dev_warn(host->dev, "operate in non-idle state = host->state\n", host->state);
+		dev_warn(host->dev, "operate in non-idle state = host->state %d\n", host->state);
 		WARN_ON(1);
 	}
 
@@ -1115,23 +1112,49 @@ static void set_pin_status(struct jzmmc_
 	gpio_direction_output(pin->num, enable);
 }
 
+extern struct proc_dir_entry * jz_proc_mkdir(char *s);
+extern void proc_remove(struct proc_dir_entry *de);
 static void jzmmc_detect_change(unsigned long data)
 {
 	struct jzmmc_host *host = (struct jzmmc_host *)data;
 	bool			present;
 	bool			present_old;
+	static int firstEntry = 1;
 	dev_vdbg(host->dev, "enter jzmmc detect change!\n");
 
 	present = get_pin_status(&host->pdata->gpio->cd);
+	if(!firstEntry) {
+          dev_warn(host->dev, "enter jzmmc detect change cd-pin %d\n", present);
+	  enable_irq(gpio_to_irq(host->pdata->gpio->cd.num));
+          return;
+        }
+	firstEntry = 0;
 	present_old = test_bit(JZMMC_CARD_PRESENT, &host->flags);
 
 	if ((present != present_old) || (present_old && host->mmc->card)) {
 		if (present && present_old)
 			dev_warn(host->dev, "rapidly remove\n");
-		else
+		else {
 			dev_notice(host->dev, "card %s, state=%d\n",
 				   present ? "inserted" : "removed", host->state);
 
+			if(host->index == 0){
+				if(present){
+					if(!host->proc){
+						host->proc = jz_proc_mkdir("mmc0");
+						if(!host->proc){
+							printk("Failed to create mmc0 proc\n");
+						}
+					}
+				}else {
+					if(host->proc){
+						proc_remove(host->proc);
+						host->proc = NULL;
+					}
+				}
+			}
+		}
+
 		/*if take timeout, then remove card,could clear the state */
 		host->timeout_state = 0;
 
@@ -1685,7 +1708,7 @@ static int __init jzmmc_gpio_init(struct
 			jzmmc_clk_autoctrl(host, 1);
 			if(!timer_pending(&host->detect_timer)){
 				disable_irq_nosync(gpio_to_irq(host->pdata->gpio->cd.num));
-				mod_timer(&host->detect_timer, jiffies + msecs_to_jiffies(500));
+				mod_timer(&host->detect_timer, jiffies);
 			}
 
 		} else {
@@ -1806,6 +1829,8 @@ static int __init jzmmc_probe(struct pla
 	if (ret < 0)
 		goto err_gpio_init;
 
+	host->proc = NULL;
+
 	jzmmc_host_init(host, mmc);
 	ret = sysfs_create_group(&pdev->dev.kobj, &jzmmc_attr_group);
 	if (ret < 0)
