/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MAX_AUDIO_FRAME_NUM: u32 = 50;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _SYS_TIME_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const V4L2_SEL_TGT_CROP: u32 = 0;
pub const V4L2_SEL_TGT_CROP_DEFAULT: u32 = 1;
pub const V4L2_SEL_TGT_CROP_BOUNDS: u32 = 2;
pub const V4L2_SEL_TGT_NATIVE_SIZE: u32 = 3;
pub const V4L2_SEL_TGT_COMPOSE: u32 = 256;
pub const V4L2_SEL_TGT_COMPOSE_DEFAULT: u32 = 257;
pub const V4L2_SEL_TGT_COMPOSE_BOUNDS: u32 = 258;
pub const V4L2_SEL_TGT_COMPOSE_PADDED: u32 = 259;
pub const V4L2_SEL_FLAG_GE: u32 = 1;
pub const V4L2_SEL_FLAG_LE: u32 = 2;
pub const V4L2_SEL_FLAG_KEEP_CONFIG: u32 = 4;
pub const V4L2_SEL_TGT_CROP_ACTIVE: u32 = 0;
pub const V4L2_SEL_TGT_COMPOSE_ACTIVE: u32 = 256;
pub const V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL: u32 = 0;
pub const V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL: u32 = 256;
pub const V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS: u32 = 2;
pub const V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS: u32 = 258;
pub const V4L2_SUBDEV_SEL_FLAG_SIZE_GE: u32 = 1;
pub const V4L2_SUBDEV_SEL_FLAG_SIZE_LE: u32 = 2;
pub const V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG: u32 = 4;
pub const V4L2_CTRL_CLASS_USER: u32 = 9961472;
pub const V4L2_CTRL_CLASS_CODEC: u32 = 10027008;
pub const V4L2_CTRL_CLASS_CAMERA: u32 = 10092544;
pub const V4L2_CTRL_CLASS_FM_TX: u32 = 10158080;
pub const V4L2_CTRL_CLASS_FLASH: u32 = 10223616;
pub const V4L2_CTRL_CLASS_JPEG: u32 = 10289152;
pub const V4L2_CTRL_CLASS_IMAGE_SOURCE: u32 = 10354688;
pub const V4L2_CTRL_CLASS_IMAGE_PROC: u32 = 10420224;
pub const V4L2_CTRL_CLASS_DV: u32 = 10485760;
pub const V4L2_CTRL_CLASS_FM_RX: u32 = 10551296;
pub const V4L2_CTRL_CLASS_RF_TUNER: u32 = 10616832;
pub const V4L2_CTRL_CLASS_DETECT: u32 = 10682368;
pub const V4L2_CTRL_CLASS_CODEC_STATELESS: u32 = 10747904;
pub const V4L2_CTRL_CLASS_COLORIMETRY: u32 = 10813440;
pub const V4L2_CID_BASE: u32 = 9963776;
pub const V4L2_CID_USER_BASE: u32 = 9963776;
pub const V4L2_CID_USER_CLASS: u32 = 9961473;
pub const V4L2_CID_BRIGHTNESS: u32 = 9963776;
pub const V4L2_CID_CONTRAST: u32 = 9963777;
pub const V4L2_CID_SATURATION: u32 = 9963778;
pub const V4L2_CID_HUE: u32 = 9963779;
pub const V4L2_CID_AUDIO_VOLUME: u32 = 9963781;
pub const V4L2_CID_AUDIO_BALANCE: u32 = 9963782;
pub const V4L2_CID_AUDIO_BASS: u32 = 9963783;
pub const V4L2_CID_AUDIO_TREBLE: u32 = 9963784;
pub const V4L2_CID_AUDIO_MUTE: u32 = 9963785;
pub const V4L2_CID_AUDIO_LOUDNESS: u32 = 9963786;
pub const V4L2_CID_BLACK_LEVEL: u32 = 9963787;
pub const V4L2_CID_AUTO_WHITE_BALANCE: u32 = 9963788;
pub const V4L2_CID_DO_WHITE_BALANCE: u32 = 9963789;
pub const V4L2_CID_RED_BALANCE: u32 = 9963790;
pub const V4L2_CID_BLUE_BALANCE: u32 = 9963791;
pub const V4L2_CID_GAMMA: u32 = 9963792;
pub const V4L2_CID_WHITENESS: u32 = 9963792;
pub const V4L2_CID_EXPOSURE: u32 = 9963793;
pub const V4L2_CID_AUTOGAIN: u32 = 9963794;
pub const V4L2_CID_GAIN: u32 = 9963795;
pub const V4L2_CID_HFLIP: u32 = 9963796;
pub const V4L2_CID_VFLIP: u32 = 9963797;
pub const V4L2_CID_POWER_LINE_FREQUENCY: u32 = 9963800;
pub const V4L2_CID_HUE_AUTO: u32 = 9963801;
pub const V4L2_CID_WHITE_BALANCE_TEMPERATURE: u32 = 9963802;
pub const V4L2_CID_SHARPNESS: u32 = 9963803;
pub const V4L2_CID_BACKLIGHT_COMPENSATION: u32 = 9963804;
pub const V4L2_CID_CHROMA_AGC: u32 = 9963805;
pub const V4L2_CID_COLOR_KILLER: u32 = 9963806;
pub const V4L2_CID_COLORFX: u32 = 9963807;
pub const V4L2_CID_AUTOBRIGHTNESS: u32 = 9963808;
pub const V4L2_CID_BAND_STOP_FILTER: u32 = 9963809;
pub const V4L2_CID_ROTATE: u32 = 9963810;
pub const V4L2_CID_BG_COLOR: u32 = 9963811;
pub const V4L2_CID_CHROMA_GAIN: u32 = 9963812;
pub const V4L2_CID_ILLUMINATORS_1: u32 = 9963813;
pub const V4L2_CID_ILLUMINATORS_2: u32 = 9963814;
pub const V4L2_CID_MIN_BUFFERS_FOR_CAPTURE: u32 = 9963815;
pub const V4L2_CID_MIN_BUFFERS_FOR_OUTPUT: u32 = 9963816;
pub const V4L2_CID_ALPHA_COMPONENT: u32 = 9963817;
pub const V4L2_CID_COLORFX_CBCR: u32 = 9963818;
pub const V4L2_CID_LASTP1: u32 = 9963819;
pub const V4L2_CID_USER_MEYE_BASE: u32 = 9967872;
pub const V4L2_CID_USER_BTTV_BASE: u32 = 9967888;
pub const V4L2_CID_USER_S2255_BASE: u32 = 9967920;
pub const V4L2_CID_USER_SI476X_BASE: u32 = 9967936;
pub const V4L2_CID_USER_TI_VPE_BASE: u32 = 9967952;
pub const V4L2_CID_USER_SAA7134_BASE: u32 = 9967968;
pub const V4L2_CID_USER_ADV7180_BASE: u32 = 9967984;
pub const V4L2_CID_USER_TC358743_BASE: u32 = 9968000;
pub const V4L2_CID_USER_MAX217X_BASE: u32 = 9968016;
pub const V4L2_CID_USER_IMX_BASE: u32 = 9968048;
pub const V4L2_CID_USER_ATMEL_ISC_BASE: u32 = 9968064;
pub const V4L2_CID_USER_CODA_BASE: u32 = 9968096;
pub const V4L2_CID_USER_CCS_BASE: u32 = 9968112;
pub const V4L2_CID_CODEC_BASE: u32 = 10029312;
pub const V4L2_CID_CODEC_CLASS: u32 = 10027009;
pub const V4L2_CID_MPEG_STREAM_TYPE: u32 = 10029312;
pub const V4L2_CID_MPEG_STREAM_PID_PMT: u32 = 10029313;
pub const V4L2_CID_MPEG_STREAM_PID_AUDIO: u32 = 10029314;
pub const V4L2_CID_MPEG_STREAM_PID_VIDEO: u32 = 10029315;
pub const V4L2_CID_MPEG_STREAM_PID_PCR: u32 = 10029316;
pub const V4L2_CID_MPEG_STREAM_PES_ID_AUDIO: u32 = 10029317;
pub const V4L2_CID_MPEG_STREAM_PES_ID_VIDEO: u32 = 10029318;
pub const V4L2_CID_MPEG_STREAM_VBI_FMT: u32 = 10029319;
pub const V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ: u32 = 10029412;
pub const V4L2_CID_MPEG_AUDIO_ENCODING: u32 = 10029413;
pub const V4L2_CID_MPEG_AUDIO_L1_BITRATE: u32 = 10029414;
pub const V4L2_CID_MPEG_AUDIO_L2_BITRATE: u32 = 10029415;
pub const V4L2_CID_MPEG_AUDIO_L3_BITRATE: u32 = 10029416;
pub const V4L2_CID_MPEG_AUDIO_MODE: u32 = 10029417;
pub const V4L2_CID_MPEG_AUDIO_MODE_EXTENSION: u32 = 10029418;
pub const V4L2_CID_MPEG_AUDIO_EMPHASIS: u32 = 10029419;
pub const V4L2_CID_MPEG_AUDIO_CRC: u32 = 10029420;
pub const V4L2_CID_MPEG_AUDIO_MUTE: u32 = 10029421;
pub const V4L2_CID_MPEG_AUDIO_AAC_BITRATE: u32 = 10029422;
pub const V4L2_CID_MPEG_AUDIO_AC3_BITRATE: u32 = 10029423;
pub const V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK: u32 = 10029424;
pub const V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK: u32 = 10029425;
pub const V4L2_CID_MPEG_VIDEO_ENCODING: u32 = 10029512;
pub const V4L2_CID_MPEG_VIDEO_ASPECT: u32 = 10029513;
pub const V4L2_CID_MPEG_VIDEO_B_FRAMES: u32 = 10029514;
pub const V4L2_CID_MPEG_VIDEO_GOP_SIZE: u32 = 10029515;
pub const V4L2_CID_MPEG_VIDEO_GOP_CLOSURE: u32 = 10029516;
pub const V4L2_CID_MPEG_VIDEO_PULLDOWN: u32 = 10029517;
pub const V4L2_CID_MPEG_VIDEO_BITRATE_MODE: u32 = 10029518;
pub const V4L2_CID_MPEG_VIDEO_BITRATE: u32 = 10029519;
pub const V4L2_CID_MPEG_VIDEO_BITRATE_PEAK: u32 = 10029520;
pub const V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION: u32 = 10029521;
pub const V4L2_CID_MPEG_VIDEO_MUTE: u32 = 10029522;
pub const V4L2_CID_MPEG_VIDEO_MUTE_YUV: u32 = 10029523;
pub const V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE: u32 = 10029524;
pub const V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER: u32 = 10029525;
pub const V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB: u32 = 10029526;
pub const V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE: u32 = 10029527;
pub const V4L2_CID_MPEG_VIDEO_HEADER_MODE: u32 = 10029528;
pub const V4L2_CID_MPEG_VIDEO_MAX_REF_PIC: u32 = 10029529;
pub const V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE: u32 = 10029530;
pub const V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES: u32 = 10029531;
pub const V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB: u32 = 10029532;
pub const V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE: u32 = 10029533;
pub const V4L2_CID_MPEG_VIDEO_VBV_SIZE: u32 = 10029534;
pub const V4L2_CID_MPEG_VIDEO_DEC_PTS: u32 = 10029535;
pub const V4L2_CID_MPEG_VIDEO_DEC_FRAME: u32 = 10029536;
pub const V4L2_CID_MPEG_VIDEO_VBV_DELAY: u32 = 10029537;
pub const V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER: u32 = 10029538;
pub const V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE: u32 = 10029539;
pub const V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE: u32 = 10029540;
pub const V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME: u32 = 10029541;
pub const V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID: u32 = 10029542;
pub const V4L2_CID_MPEG_VIDEO_AU_DELIMITER: u32 = 10029543;
pub const V4L2_CID_MPEG_VIDEO_LTR_COUNT: u32 = 10029544;
pub const V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX: u32 = 10029545;
pub const V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES: u32 = 10029546;
pub const V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR: u32 = 10029547;
pub const V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD: u32 = 10029548;
pub const V4L2_CID_MPEG_VIDEO_MPEG2_LEVEL: u32 = 10029582;
pub const V4L2_CID_MPEG_VIDEO_MPEG2_PROFILE: u32 = 10029583;
pub const V4L2_CID_FWHT_I_FRAME_QP: u32 = 10029602;
pub const V4L2_CID_FWHT_P_FRAME_QP: u32 = 10029603;
pub const V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP: u32 = 10029612;
pub const V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP: u32 = 10029613;
pub const V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP: u32 = 10029614;
pub const V4L2_CID_MPEG_VIDEO_H263_MIN_QP: u32 = 10029615;
pub const V4L2_CID_MPEG_VIDEO_H263_MAX_QP: u32 = 10029616;
pub const V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP: u32 = 10029662;
pub const V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP: u32 = 10029663;
pub const V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP: u32 = 10029664;
pub const V4L2_CID_MPEG_VIDEO_H264_MIN_QP: u32 = 10029665;
pub const V4L2_CID_MPEG_VIDEO_H264_MAX_QP: u32 = 10029666;
pub const V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM: u32 = 10029667;
pub const V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE: u32 = 10029668;
pub const V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE: u32 = 10029669;
pub const V4L2_CID_MPEG_VIDEO_H264_I_PERIOD: u32 = 10029670;
pub const V4L2_CID_MPEG_VIDEO_H264_LEVEL: u32 = 10029671;
pub const V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA: u32 = 10029672;
pub const V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA: u32 = 10029673;
pub const V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE: u32 = 10029674;
pub const V4L2_CID_MPEG_VIDEO_H264_PROFILE: u32 = 10029675;
pub const V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT: u32 = 10029676;
pub const V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH: u32 = 10029677;
pub const V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE: u32 = 10029678;
pub const V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC: u32 = 10029679;
pub const V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING: u32 = 10029680;
pub const V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0: u32 = 10029681;
pub const V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE: u32 = 10029682;
pub const V4L2_CID_MPEG_VIDEO_H264_FMO: u32 = 10029683;
pub const V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE: u32 = 10029684;
pub const V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP: u32 = 10029685;
pub const V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION: u32 = 10029686;
pub const V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE: u32 = 10029687;
pub const V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH: u32 = 10029688;
pub const V4L2_CID_MPEG_VIDEO_H264_ASO: u32 = 10029689;
pub const V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER: u32 = 10029690;
pub const V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING: u32 = 10029691;
pub const V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE: u32 = 10029692;
pub const V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER: u32 = 10029693;
pub const V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP: u32 = 10029694;
pub const V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION: u32 = 10029695;
pub const V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET: u32 = 10029696;
pub const V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP: u32 = 10029697;
pub const V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP: u32 = 10029698;
pub const V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP: u32 = 10029699;
pub const V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP: u32 = 10029700;
pub const V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP: u32 = 10029701;
pub const V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP: u32 = 10029702;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR: u32 = 10029703;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR: u32 = 10029704;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR: u32 = 10029705;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR: u32 = 10029706;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR: u32 = 10029707;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR: u32 = 10029708;
pub const V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR: u32 = 10029709;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP: u32 = 10029712;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP: u32 = 10029713;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP: u32 = 10029714;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP: u32 = 10029715;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP: u32 = 10029716;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL: u32 = 10029717;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE: u32 = 10029718;
pub const V4L2_CID_MPEG_VIDEO_MPEG4_QPEL: u32 = 10029719;
pub const V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS: u32 = 10029812;
pub const V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4: u32 = 10029813;
pub const V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES: u32 = 10029814;
pub const V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL: u32 = 10029815;
pub const V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS: u32 = 10029816;
pub const V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD: u32 = 10029817;
pub const V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL: u32 = 10029818;
pub const V4L2_CID_MPEG_VIDEO_VPX_MIN_QP: u32 = 10029819;
pub const V4L2_CID_MPEG_VIDEO_VPX_MAX_QP: u32 = 10029820;
pub const V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP: u32 = 10029821;
pub const V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP: u32 = 10029822;
pub const V4L2_CID_MPEG_VIDEO_VP8_PROFILE: u32 = 10029823;
pub const V4L2_CID_MPEG_VIDEO_VPX_PROFILE: u32 = 10029823;
pub const V4L2_CID_MPEG_VIDEO_VP9_PROFILE: u32 = 10029824;
pub const V4L2_CID_MPEG_VIDEO_VP9_LEVEL: u32 = 10029825;
pub const V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP: u32 = 10029912;
pub const V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP: u32 = 10029913;
pub const V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP: u32 = 10029914;
pub const V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP: u32 = 10029915;
pub const V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP: u32 = 10029916;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP: u32 = 10029917;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE: u32 = 10029918;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER: u32 = 10029919;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP: u32 = 10029920;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP: u32 = 10029921;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP: u32 = 10029922;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP: u32 = 10029923;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP: u32 = 10029924;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP: u32 = 10029925;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP: u32 = 10029926;
pub const V4L2_CID_MPEG_VIDEO_HEVC_PROFILE: u32 = 10029927;
pub const V4L2_CID_MPEG_VIDEO_HEVC_LEVEL: u32 = 10029928;
pub const V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION: u32 = 10029929;
pub const V4L2_CID_MPEG_VIDEO_HEVC_TIER: u32 = 10029930;
pub const V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH: u32 = 10029931;
pub const V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE: u32 = 10029932;
pub const V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2: u32 = 10029933;
pub const V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2: u32 = 10029934;
pub const V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE: u32 = 10029935;
pub const V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD: u32 = 10029936;
pub const V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU: u32 = 10029937;
pub const V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED: u32 = 10029938;
pub const V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT: u32 = 10029939;
pub const V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB: u32 = 10029940;
pub const V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID: u32 = 10029941;
pub const V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING: u32 = 10029942;
pub const V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1: u32 = 10029943;
pub const V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT: u32 = 10029944;
pub const V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION: u32 = 10029945;
pub const V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE: u32 = 10029946;
pub const V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD: u32 = 10029947;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR: u32 = 10029948;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR: u32 = 10029949;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR: u32 = 10029950;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR: u32 = 10029951;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR: u32 = 10029952;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR: u32 = 10029953;
pub const V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR: u32 = 10029954;
pub const V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES: u32 = 10029955;
pub const V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR: u32 = 10029956;
pub const V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY: u32 = 10029957;
pub const V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE: u32 = 10029958;
pub const V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP: u32 = 10029959;
pub const V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP: u32 = 10029960;
pub const V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP: u32 = 10029961;
pub const V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP: u32 = 10029962;
pub const V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP: u32 = 10029963;
pub const V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP: u32 = 10029964;
pub const V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY: u32 = 10029965;
pub const V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE: u32 = 10029966;
pub const V4L2_CID_CODEC_CX2341X_BASE: u32 = 10031104;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE: u32 = 10031104;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER: u32 = 10031105;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE: u32 = 10031106;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE: u32 = 10031107;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE: u32 = 10031108;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER: u32 = 10031109;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE: u32 = 10031110;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM: u32 = 10031111;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP: u32 = 10031112;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM: u32 = 10031113;
pub const V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP: u32 = 10031114;
pub const V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS: u32 = 10031115;
pub const V4L2_CID_CODEC_MFC51_BASE: u32 = 10031360;
pub const V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY: u32 = 10031360;
pub const V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE: u32 = 10031361;
pub const V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE: u32 = 10031362;
pub const V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE: u32 = 10031363;
pub const V4L2_CID_MPEG_MFC51_VIDEO_PADDING: u32 = 10031364;
pub const V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV: u32 = 10031365;
pub const V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT: u32 = 10031366;
pub const V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF: u32 = 10031367;
pub const V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY: u32 = 10031410;
pub const V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK: u32 = 10031411;
pub const V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH: u32 = 10031412;
pub const V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC: u32 = 10031413;
pub const V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P: u32 = 10031414;
pub const V4L2_CID_CAMERA_CLASS_BASE: u32 = 10094848;
pub const V4L2_CID_CAMERA_CLASS: u32 = 10092545;
pub const V4L2_CID_EXPOSURE_AUTO: u32 = 10094849;
pub const V4L2_CID_EXPOSURE_ABSOLUTE: u32 = 10094850;
pub const V4L2_CID_EXPOSURE_AUTO_PRIORITY: u32 = 10094851;
pub const V4L2_CID_PAN_RELATIVE: u32 = 10094852;
pub const V4L2_CID_TILT_RELATIVE: u32 = 10094853;
pub const V4L2_CID_PAN_RESET: u32 = 10094854;
pub const V4L2_CID_TILT_RESET: u32 = 10094855;
pub const V4L2_CID_PAN_ABSOLUTE: u32 = 10094856;
pub const V4L2_CID_TILT_ABSOLUTE: u32 = 10094857;
pub const V4L2_CID_FOCUS_ABSOLUTE: u32 = 10094858;
pub const V4L2_CID_FOCUS_RELATIVE: u32 = 10094859;
pub const V4L2_CID_FOCUS_AUTO: u32 = 10094860;
pub const V4L2_CID_ZOOM_ABSOLUTE: u32 = 10094861;
pub const V4L2_CID_ZOOM_RELATIVE: u32 = 10094862;
pub const V4L2_CID_ZOOM_CONTINUOUS: u32 = 10094863;
pub const V4L2_CID_PRIVACY: u32 = 10094864;
pub const V4L2_CID_IRIS_ABSOLUTE: u32 = 10094865;
pub const V4L2_CID_IRIS_RELATIVE: u32 = 10094866;
pub const V4L2_CID_AUTO_EXPOSURE_BIAS: u32 = 10094867;
pub const V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE: u32 = 10094868;
pub const V4L2_CID_WIDE_DYNAMIC_RANGE: u32 = 10094869;
pub const V4L2_CID_IMAGE_STABILIZATION: u32 = 10094870;
pub const V4L2_CID_ISO_SENSITIVITY: u32 = 10094871;
pub const V4L2_CID_ISO_SENSITIVITY_AUTO: u32 = 10094872;
pub const V4L2_CID_EXPOSURE_METERING: u32 = 10094873;
pub const V4L2_CID_SCENE_MODE: u32 = 10094874;
pub const V4L2_CID_3A_LOCK: u32 = 10094875;
pub const V4L2_LOCK_EXPOSURE: u32 = 1;
pub const V4L2_LOCK_WHITE_BALANCE: u32 = 2;
pub const V4L2_LOCK_FOCUS: u32 = 4;
pub const V4L2_CID_AUTO_FOCUS_START: u32 = 10094876;
pub const V4L2_CID_AUTO_FOCUS_STOP: u32 = 10094877;
pub const V4L2_CID_AUTO_FOCUS_STATUS: u32 = 10094878;
pub const V4L2_AUTO_FOCUS_STATUS_IDLE: u32 = 0;
pub const V4L2_AUTO_FOCUS_STATUS_BUSY: u32 = 1;
pub const V4L2_AUTO_FOCUS_STATUS_REACHED: u32 = 2;
pub const V4L2_AUTO_FOCUS_STATUS_FAILED: u32 = 4;
pub const V4L2_CID_AUTO_FOCUS_RANGE: u32 = 10094879;
pub const V4L2_CID_PAN_SPEED: u32 = 10094880;
pub const V4L2_CID_TILT_SPEED: u32 = 10094881;
pub const V4L2_CID_CAMERA_ORIENTATION: u32 = 10094882;
pub const V4L2_CAMERA_ORIENTATION_FRONT: u32 = 0;
pub const V4L2_CAMERA_ORIENTATION_BACK: u32 = 1;
pub const V4L2_CAMERA_ORIENTATION_EXTERNAL: u32 = 2;
pub const V4L2_CID_CAMERA_SENSOR_ROTATION: u32 = 10094883;
pub const V4L2_CID_FM_TX_CLASS_BASE: u32 = 10160384;
pub const V4L2_CID_FM_TX_CLASS: u32 = 10158081;
pub const V4L2_CID_RDS_TX_DEVIATION: u32 = 10160385;
pub const V4L2_CID_RDS_TX_PI: u32 = 10160386;
pub const V4L2_CID_RDS_TX_PTY: u32 = 10160387;
pub const V4L2_CID_RDS_TX_PS_NAME: u32 = 10160389;
pub const V4L2_CID_RDS_TX_RADIO_TEXT: u32 = 10160390;
pub const V4L2_CID_RDS_TX_MONO_STEREO: u32 = 10160391;
pub const V4L2_CID_RDS_TX_ARTIFICIAL_HEAD: u32 = 10160392;
pub const V4L2_CID_RDS_TX_COMPRESSED: u32 = 10160393;
pub const V4L2_CID_RDS_TX_DYNAMIC_PTY: u32 = 10160394;
pub const V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT: u32 = 10160395;
pub const V4L2_CID_RDS_TX_TRAFFIC_PROGRAM: u32 = 10160396;
pub const V4L2_CID_RDS_TX_MUSIC_SPEECH: u32 = 10160397;
pub const V4L2_CID_RDS_TX_ALT_FREQS_ENABLE: u32 = 10160398;
pub const V4L2_CID_RDS_TX_ALT_FREQS: u32 = 10160399;
pub const V4L2_CID_AUDIO_LIMITER_ENABLED: u32 = 10160448;
pub const V4L2_CID_AUDIO_LIMITER_RELEASE_TIME: u32 = 10160449;
pub const V4L2_CID_AUDIO_LIMITER_DEVIATION: u32 = 10160450;
pub const V4L2_CID_AUDIO_COMPRESSION_ENABLED: u32 = 10160464;
pub const V4L2_CID_AUDIO_COMPRESSION_GAIN: u32 = 10160465;
pub const V4L2_CID_AUDIO_COMPRESSION_THRESHOLD: u32 = 10160466;
pub const V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME: u32 = 10160467;
pub const V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME: u32 = 10160468;
pub const V4L2_CID_PILOT_TONE_ENABLED: u32 = 10160480;
pub const V4L2_CID_PILOT_TONE_DEVIATION: u32 = 10160481;
pub const V4L2_CID_PILOT_TONE_FREQUENCY: u32 = 10160482;
pub const V4L2_CID_TUNE_PREEMPHASIS: u32 = 10160496;
pub const V4L2_CID_TUNE_POWER_LEVEL: u32 = 10160497;
pub const V4L2_CID_TUNE_ANTENNA_CAPACITOR: u32 = 10160498;
pub const V4L2_CID_FLASH_CLASS_BASE: u32 = 10225920;
pub const V4L2_CID_FLASH_CLASS: u32 = 10223617;
pub const V4L2_CID_FLASH_LED_MODE: u32 = 10225921;
pub const V4L2_CID_FLASH_STROBE_SOURCE: u32 = 10225922;
pub const V4L2_CID_FLASH_STROBE: u32 = 10225923;
pub const V4L2_CID_FLASH_STROBE_STOP: u32 = 10225924;
pub const V4L2_CID_FLASH_STROBE_STATUS: u32 = 10225925;
pub const V4L2_CID_FLASH_TIMEOUT: u32 = 10225926;
pub const V4L2_CID_FLASH_INTENSITY: u32 = 10225927;
pub const V4L2_CID_FLASH_TORCH_INTENSITY: u32 = 10225928;
pub const V4L2_CID_FLASH_INDICATOR_INTENSITY: u32 = 10225929;
pub const V4L2_CID_FLASH_FAULT: u32 = 10225930;
pub const V4L2_FLASH_FAULT_OVER_VOLTAGE: u32 = 1;
pub const V4L2_FLASH_FAULT_TIMEOUT: u32 = 2;
pub const V4L2_FLASH_FAULT_OVER_TEMPERATURE: u32 = 4;
pub const V4L2_FLASH_FAULT_SHORT_CIRCUIT: u32 = 8;
pub const V4L2_FLASH_FAULT_OVER_CURRENT: u32 = 16;
pub const V4L2_FLASH_FAULT_INDICATOR: u32 = 32;
pub const V4L2_FLASH_FAULT_UNDER_VOLTAGE: u32 = 64;
pub const V4L2_FLASH_FAULT_INPUT_VOLTAGE: u32 = 128;
pub const V4L2_FLASH_FAULT_LED_OVER_TEMPERATURE: u32 = 256;
pub const V4L2_CID_FLASH_CHARGE: u32 = 10225931;
pub const V4L2_CID_FLASH_READY: u32 = 10225932;
pub const V4L2_CID_JPEG_CLASS_BASE: u32 = 10291456;
pub const V4L2_CID_JPEG_CLASS: u32 = 10289153;
pub const V4L2_CID_JPEG_CHROMA_SUBSAMPLING: u32 = 10291457;
pub const V4L2_CID_JPEG_RESTART_INTERVAL: u32 = 10291458;
pub const V4L2_CID_JPEG_COMPRESSION_QUALITY: u32 = 10291459;
pub const V4L2_CID_JPEG_ACTIVE_MARKER: u32 = 10291460;
pub const V4L2_JPEG_ACTIVE_MARKER_APP0: u32 = 1;
pub const V4L2_JPEG_ACTIVE_MARKER_APP1: u32 = 2;
pub const V4L2_JPEG_ACTIVE_MARKER_COM: u32 = 65536;
pub const V4L2_JPEG_ACTIVE_MARKER_DQT: u32 = 131072;
pub const V4L2_JPEG_ACTIVE_MARKER_DHT: u32 = 262144;
pub const V4L2_CID_IMAGE_SOURCE_CLASS_BASE: u32 = 10356992;
pub const V4L2_CID_IMAGE_SOURCE_CLASS: u32 = 10354689;
pub const V4L2_CID_VBLANK: u32 = 10356993;
pub const V4L2_CID_HBLANK: u32 = 10356994;
pub const V4L2_CID_ANALOGUE_GAIN: u32 = 10356995;
pub const V4L2_CID_TEST_PATTERN_RED: u32 = 10356996;
pub const V4L2_CID_TEST_PATTERN_GREENR: u32 = 10356997;
pub const V4L2_CID_TEST_PATTERN_BLUE: u32 = 10356998;
pub const V4L2_CID_TEST_PATTERN_GREENB: u32 = 10356999;
pub const V4L2_CID_UNIT_CELL_SIZE: u32 = 10357000;
pub const V4L2_CID_IMAGE_PROC_CLASS_BASE: u32 = 10422528;
pub const V4L2_CID_IMAGE_PROC_CLASS: u32 = 10420225;
pub const V4L2_CID_LINK_FREQ: u32 = 10422529;
pub const V4L2_CID_PIXEL_RATE: u32 = 10422530;
pub const V4L2_CID_TEST_PATTERN: u32 = 10422531;
pub const V4L2_CID_DEINTERLACING_MODE: u32 = 10422532;
pub const V4L2_CID_DIGITAL_GAIN: u32 = 10422533;
pub const V4L2_CID_DV_CLASS_BASE: u32 = 10488064;
pub const V4L2_CID_DV_CLASS: u32 = 10485761;
pub const V4L2_CID_DV_TX_HOTPLUG: u32 = 10488065;
pub const V4L2_CID_DV_TX_RXSENSE: u32 = 10488066;
pub const V4L2_CID_DV_TX_EDID_PRESENT: u32 = 10488067;
pub const V4L2_CID_DV_TX_MODE: u32 = 10488068;
pub const V4L2_CID_DV_TX_RGB_RANGE: u32 = 10488069;
pub const V4L2_CID_DV_TX_IT_CONTENT_TYPE: u32 = 10488070;
pub const V4L2_CID_DV_RX_POWER_PRESENT: u32 = 10488164;
pub const V4L2_CID_DV_RX_RGB_RANGE: u32 = 10488165;
pub const V4L2_CID_DV_RX_IT_CONTENT_TYPE: u32 = 10488166;
pub const V4L2_CID_FM_RX_CLASS_BASE: u32 = 10553600;
pub const V4L2_CID_FM_RX_CLASS: u32 = 10551297;
pub const V4L2_CID_TUNE_DEEMPHASIS: u32 = 10553601;
pub const V4L2_CID_RDS_RECEPTION: u32 = 10553602;
pub const V4L2_CID_RDS_RX_PTY: u32 = 10553603;
pub const V4L2_CID_RDS_RX_PS_NAME: u32 = 10553604;
pub const V4L2_CID_RDS_RX_RADIO_TEXT: u32 = 10553605;
pub const V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT: u32 = 10553606;
pub const V4L2_CID_RDS_RX_TRAFFIC_PROGRAM: u32 = 10553607;
pub const V4L2_CID_RDS_RX_MUSIC_SPEECH: u32 = 10553608;
pub const V4L2_CID_RF_TUNER_CLASS_BASE: u32 = 10619136;
pub const V4L2_CID_RF_TUNER_CLASS: u32 = 10616833;
pub const V4L2_CID_RF_TUNER_BANDWIDTH_AUTO: u32 = 10619147;
pub const V4L2_CID_RF_TUNER_BANDWIDTH: u32 = 10619148;
pub const V4L2_CID_RF_TUNER_RF_GAIN: u32 = 10619168;
pub const V4L2_CID_RF_TUNER_LNA_GAIN_AUTO: u32 = 10619177;
pub const V4L2_CID_RF_TUNER_LNA_GAIN: u32 = 10619178;
pub const V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO: u32 = 10619187;
pub const V4L2_CID_RF_TUNER_MIXER_GAIN: u32 = 10619188;
pub const V4L2_CID_RF_TUNER_IF_GAIN_AUTO: u32 = 10619197;
pub const V4L2_CID_RF_TUNER_IF_GAIN: u32 = 10619198;
pub const V4L2_CID_RF_TUNER_PLL_LOCK: u32 = 10619227;
pub const V4L2_CID_DETECT_CLASS_BASE: u32 = 10684672;
pub const V4L2_CID_DETECT_CLASS: u32 = 10682369;
pub const V4L2_CID_DETECT_MD_MODE: u32 = 10684673;
pub const V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD: u32 = 10684674;
pub const V4L2_CID_DETECT_MD_THRESHOLD_GRID: u32 = 10684675;
pub const V4L2_CID_DETECT_MD_REGION_GRID: u32 = 10684676;
pub const V4L2_CID_CODEC_STATELESS_BASE: u32 = 10750208;
pub const V4L2_CID_CODEC_STATELESS_CLASS: u32 = 10747905;
pub const V4L2_CID_STATELESS_H264_DECODE_MODE: u32 = 10750208;
pub const V4L2_CID_STATELESS_H264_START_CODE: u32 = 10750209;
pub const V4L2_H264_SPS_CONSTRAINT_SET0_FLAG: u32 = 1;
pub const V4L2_H264_SPS_CONSTRAINT_SET1_FLAG: u32 = 2;
pub const V4L2_H264_SPS_CONSTRAINT_SET2_FLAG: u32 = 4;
pub const V4L2_H264_SPS_CONSTRAINT_SET3_FLAG: u32 = 8;
pub const V4L2_H264_SPS_CONSTRAINT_SET4_FLAG: u32 = 16;
pub const V4L2_H264_SPS_CONSTRAINT_SET5_FLAG: u32 = 32;
pub const V4L2_H264_SPS_FLAG_SEPARATE_COLOUR_PLANE: u32 = 1;
pub const V4L2_H264_SPS_FLAG_QPPRIME_Y_ZERO_TRANSFORM_BYPASS: u32 = 2;
pub const V4L2_H264_SPS_FLAG_DELTA_PIC_ORDER_ALWAYS_ZERO: u32 = 4;
pub const V4L2_H264_SPS_FLAG_GAPS_IN_FRAME_NUM_VALUE_ALLOWED: u32 = 8;
pub const V4L2_H264_SPS_FLAG_FRAME_MBS_ONLY: u32 = 16;
pub const V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD: u32 = 32;
pub const V4L2_H264_SPS_FLAG_DIRECT_8X8_INFERENCE: u32 = 64;
pub const V4L2_CID_STATELESS_H264_SPS: u32 = 10750210;
pub const V4L2_H264_PPS_FLAG_ENTROPY_CODING_MODE: u32 = 1;
pub const V4L2_H264_PPS_FLAG_BOTTOM_FIELD_PIC_ORDER_IN_FRAME_PRESENT: u32 = 2;
pub const V4L2_H264_PPS_FLAG_WEIGHTED_PRED: u32 = 4;
pub const V4L2_H264_PPS_FLAG_DEBLOCKING_FILTER_CONTROL_PRESENT: u32 = 8;
pub const V4L2_H264_PPS_FLAG_CONSTRAINED_INTRA_PRED: u32 = 16;
pub const V4L2_H264_PPS_FLAG_REDUNDANT_PIC_CNT_PRESENT: u32 = 32;
pub const V4L2_H264_PPS_FLAG_TRANSFORM_8X8_MODE: u32 = 64;
pub const V4L2_H264_PPS_FLAG_SCALING_MATRIX_PRESENT: u32 = 128;
pub const V4L2_CID_STATELESS_H264_PPS: u32 = 10750211;
pub const V4L2_CID_STATELESS_H264_SCALING_MATRIX: u32 = 10750212;
pub const V4L2_CID_STATELESS_H264_PRED_WEIGHTS: u32 = 10750213;
pub const V4L2_H264_SLICE_TYPE_P: u32 = 0;
pub const V4L2_H264_SLICE_TYPE_B: u32 = 1;
pub const V4L2_H264_SLICE_TYPE_I: u32 = 2;
pub const V4L2_H264_SLICE_TYPE_SP: u32 = 3;
pub const V4L2_H264_SLICE_TYPE_SI: u32 = 4;
pub const V4L2_H264_SLICE_FLAG_DIRECT_SPATIAL_MV_PRED: u32 = 1;
pub const V4L2_H264_SLICE_FLAG_SP_FOR_SWITCH: u32 = 2;
pub const V4L2_H264_TOP_FIELD_REF: u32 = 1;
pub const V4L2_H264_BOTTOM_FIELD_REF: u32 = 2;
pub const V4L2_H264_FRAME_REF: u32 = 3;
pub const V4L2_H264_NUM_DPB_ENTRIES: u32 = 16;
pub const V4L2_H264_REF_LIST_LEN: u32 = 32;
pub const V4L2_CID_STATELESS_H264_SLICE_PARAMS: u32 = 10750214;
pub const V4L2_H264_DPB_ENTRY_FLAG_VALID: u32 = 1;
pub const V4L2_H264_DPB_ENTRY_FLAG_ACTIVE: u32 = 2;
pub const V4L2_H264_DPB_ENTRY_FLAG_LONG_TERM: u32 = 4;
pub const V4L2_H264_DPB_ENTRY_FLAG_FIELD: u32 = 8;
pub const V4L2_H264_DECODE_PARAM_FLAG_IDR_PIC: u32 = 1;
pub const V4L2_H264_DECODE_PARAM_FLAG_FIELD_PIC: u32 = 2;
pub const V4L2_H264_DECODE_PARAM_FLAG_BOTTOM_FIELD: u32 = 4;
pub const V4L2_CID_STATELESS_H264_DECODE_PARAMS: u32 = 10750215;
pub const V4L2_FWHT_VERSION: u32 = 3;
pub const V4L2_FWHT_FL_COMPONENTS_NUM_OFFSET: u32 = 16;
pub const V4L2_FWHT_FL_PIXENC_OFFSET: u32 = 19;
pub const V4L2_FWHT_FL_PIXENC_YUV: u32 = 524288;
pub const V4L2_FWHT_FL_PIXENC_RGB: u32 = 1048576;
pub const V4L2_FWHT_FL_PIXENC_HSV: u32 = 1572864;
pub const V4L2_CID_STATELESS_FWHT_PARAMS: u32 = 10750308;
pub const V4L2_VP8_SEGMENT_FLAG_ENABLED: u32 = 1;
pub const V4L2_VP8_SEGMENT_FLAG_UPDATE_MAP: u32 = 2;
pub const V4L2_VP8_SEGMENT_FLAG_UPDATE_FEATURE_DATA: u32 = 4;
pub const V4L2_VP8_SEGMENT_FLAG_DELTA_VALUE_MODE: u32 = 8;
pub const V4L2_VP8_LF_ADJ_ENABLE: u32 = 1;
pub const V4L2_VP8_LF_DELTA_UPDATE: u32 = 2;
pub const V4L2_VP8_LF_FILTER_TYPE_SIMPLE: u32 = 4;
pub const V4L2_VP8_COEFF_PROB_CNT: u32 = 11;
pub const V4L2_VP8_MV_PROB_CNT: u32 = 19;
pub const V4L2_VP8_FRAME_FLAG_KEY_FRAME: u32 = 1;
pub const V4L2_VP8_FRAME_FLAG_EXPERIMENTAL: u32 = 2;
pub const V4L2_VP8_FRAME_FLAG_SHOW_FRAME: u32 = 4;
pub const V4L2_VP8_FRAME_FLAG_MB_NO_SKIP_COEFF: u32 = 8;
pub const V4L2_VP8_FRAME_FLAG_SIGN_BIAS_GOLDEN: u32 = 16;
pub const V4L2_VP8_FRAME_FLAG_SIGN_BIAS_ALT: u32 = 32;
pub const V4L2_CID_STATELESS_VP8_FRAME: u32 = 10750408;
pub const V4L2_MPEG2_SEQ_FLAG_PROGRESSIVE: u32 = 1;
pub const V4L2_CID_STATELESS_MPEG2_SEQUENCE: u32 = 10750428;
pub const V4L2_MPEG2_PIC_CODING_TYPE_I: u32 = 1;
pub const V4L2_MPEG2_PIC_CODING_TYPE_P: u32 = 2;
pub const V4L2_MPEG2_PIC_CODING_TYPE_B: u32 = 3;
pub const V4L2_MPEG2_PIC_CODING_TYPE_D: u32 = 4;
pub const V4L2_MPEG2_PIC_TOP_FIELD: u32 = 1;
pub const V4L2_MPEG2_PIC_BOTTOM_FIELD: u32 = 2;
pub const V4L2_MPEG2_PIC_FRAME: u32 = 3;
pub const V4L2_MPEG2_PIC_FLAG_TOP_FIELD_FIRST: u32 = 1;
pub const V4L2_MPEG2_PIC_FLAG_FRAME_PRED_DCT: u32 = 2;
pub const V4L2_MPEG2_PIC_FLAG_CONCEALMENT_MV: u32 = 4;
pub const V4L2_MPEG2_PIC_FLAG_Q_SCALE_TYPE: u32 = 8;
pub const V4L2_MPEG2_PIC_FLAG_INTRA_VLC: u32 = 16;
pub const V4L2_MPEG2_PIC_FLAG_ALT_SCAN: u32 = 32;
pub const V4L2_MPEG2_PIC_FLAG_REPEAT_FIRST: u32 = 64;
pub const V4L2_MPEG2_PIC_FLAG_PROGRESSIVE: u32 = 128;
pub const V4L2_CID_STATELESS_MPEG2_PICTURE: u32 = 10750429;
pub const V4L2_CID_STATELESS_MPEG2_QUANTISATION: u32 = 10750430;
pub const V4L2_CID_COLORIMETRY_CLASS_BASE: u32 = 10815744;
pub const V4L2_CID_COLORIMETRY_CLASS: u32 = 10813441;
pub const V4L2_CID_COLORIMETRY_HDR10_CLL_INFO: u32 = 10815744;
pub const V4L2_CID_COLORIMETRY_HDR10_MASTERING_DISPLAY: u32 = 10815745;
pub const V4L2_HDR10_MASTERING_PRIMARIES_X_LOW: u32 = 5;
pub const V4L2_HDR10_MASTERING_PRIMARIES_X_HIGH: u32 = 37000;
pub const V4L2_HDR10_MASTERING_PRIMARIES_Y_LOW: u32 = 5;
pub const V4L2_HDR10_MASTERING_PRIMARIES_Y_HIGH: u32 = 42000;
pub const V4L2_HDR10_MASTERING_WHITE_POINT_X_LOW: u32 = 5;
pub const V4L2_HDR10_MASTERING_WHITE_POINT_X_HIGH: u32 = 37000;
pub const V4L2_HDR10_MASTERING_WHITE_POINT_Y_LOW: u32 = 5;
pub const V4L2_HDR10_MASTERING_WHITE_POINT_Y_HIGH: u32 = 42000;
pub const V4L2_HDR10_MASTERING_MAX_LUMA_LOW: u32 = 50000;
pub const V4L2_HDR10_MASTERING_MAX_LUMA_HIGH: u32 = 100000000;
pub const V4L2_HDR10_MASTERING_MIN_LUMA_LOW: u32 = 1;
pub const V4L2_HDR10_MASTERING_MIN_LUMA_HIGH: u32 = 50000;
pub const V4L2_CTRL_CLASS_MPEG: u32 = 10027008;
pub const V4L2_CID_MPEG_CLASS: u32 = 10027009;
pub const V4L2_CID_MPEG_BASE: u32 = 10029312;
pub const V4L2_CID_MPEG_CX2341X_BASE: u32 = 10031104;
pub const V4L2_CID_MPEG_MFC51_BASE: u32 = 10031360;
pub const VIDEO_MAX_FRAME: u32 = 32;
pub const VIDEO_MAX_PLANES: u32 = 8;
pub const V4L2_CAP_VIDEO_CAPTURE: u32 = 1;
pub const V4L2_CAP_VIDEO_OUTPUT: u32 = 2;
pub const V4L2_CAP_VIDEO_OVERLAY: u32 = 4;
pub const V4L2_CAP_VBI_CAPTURE: u32 = 16;
pub const V4L2_CAP_VBI_OUTPUT: u32 = 32;
pub const V4L2_CAP_SLICED_VBI_CAPTURE: u32 = 64;
pub const V4L2_CAP_SLICED_VBI_OUTPUT: u32 = 128;
pub const V4L2_CAP_RDS_CAPTURE: u32 = 256;
pub const V4L2_CAP_VIDEO_OUTPUT_OVERLAY: u32 = 512;
pub const V4L2_CAP_HW_FREQ_SEEK: u32 = 1024;
pub const V4L2_CAP_RDS_OUTPUT: u32 = 2048;
pub const V4L2_CAP_VIDEO_CAPTURE_MPLANE: u32 = 4096;
pub const V4L2_CAP_VIDEO_OUTPUT_MPLANE: u32 = 8192;
pub const V4L2_CAP_VIDEO_M2M_MPLANE: u32 = 16384;
pub const V4L2_CAP_VIDEO_M2M: u32 = 32768;
pub const V4L2_CAP_TUNER: u32 = 65536;
pub const V4L2_CAP_AUDIO: u32 = 131072;
pub const V4L2_CAP_RADIO: u32 = 262144;
pub const V4L2_CAP_MODULATOR: u32 = 524288;
pub const V4L2_CAP_SDR_CAPTURE: u32 = 1048576;
pub const V4L2_CAP_EXT_PIX_FORMAT: u32 = 2097152;
pub const V4L2_CAP_SDR_OUTPUT: u32 = 4194304;
pub const V4L2_CAP_META_CAPTURE: u32 = 8388608;
pub const V4L2_CAP_READWRITE: u32 = 16777216;
pub const V4L2_CAP_ASYNCIO: u32 = 33554432;
pub const V4L2_CAP_STREAMING: u32 = 67108864;
pub const V4L2_CAP_META_OUTPUT: u32 = 134217728;
pub const V4L2_CAP_TOUCH: u32 = 268435456;
pub const V4L2_CAP_IO_MC: u32 = 536870912;
pub const V4L2_CAP_DEVICE_CAPS: u32 = 2147483648;
pub const V4L2_PIX_FMT_PRIV_MAGIC: u32 = 4276996862;
pub const V4L2_PIX_FMT_FLAG_PREMUL_ALPHA: u32 = 1;
pub const V4L2_PIX_FMT_FLAG_SET_CSC: u32 = 2;
pub const V4L2_FMT_FLAG_COMPRESSED: u32 = 1;
pub const V4L2_FMT_FLAG_EMULATED: u32 = 2;
pub const V4L2_FMT_FLAG_CONTINUOUS_BYTESTREAM: u32 = 4;
pub const V4L2_FMT_FLAG_DYN_RESOLUTION: u32 = 8;
pub const V4L2_FMT_FLAG_ENC_CAP_FRAME_INTERVAL: u32 = 16;
pub const V4L2_FMT_FLAG_CSC_COLORSPACE: u32 = 32;
pub const V4L2_FMT_FLAG_CSC_XFER_FUNC: u32 = 64;
pub const V4L2_FMT_FLAG_CSC_YCBCR_ENC: u32 = 128;
pub const V4L2_FMT_FLAG_CSC_HSV_ENC: u32 = 128;
pub const V4L2_FMT_FLAG_CSC_QUANTIZATION: u32 = 256;
pub const V4L2_TC_TYPE_24FPS: u32 = 1;
pub const V4L2_TC_TYPE_25FPS: u32 = 2;
pub const V4L2_TC_TYPE_30FPS: u32 = 3;
pub const V4L2_TC_TYPE_50FPS: u32 = 4;
pub const V4L2_TC_TYPE_60FPS: u32 = 5;
pub const V4L2_TC_FLAG_DROPFRAME: u32 = 1;
pub const V4L2_TC_FLAG_COLORFRAME: u32 = 2;
pub const V4L2_TC_USERBITS_field: u32 = 12;
pub const V4L2_TC_USERBITS_USERDEFINED: u32 = 0;
pub const V4L2_TC_USERBITS_8BITCHARS: u32 = 8;
pub const V4L2_JPEG_MARKER_DHT: u32 = 8;
pub const V4L2_JPEG_MARKER_DQT: u32 = 16;
pub const V4L2_JPEG_MARKER_DRI: u32 = 32;
pub const V4L2_JPEG_MARKER_COM: u32 = 64;
pub const V4L2_JPEG_MARKER_APP: u32 = 128;
pub const V4L2_BUF_CAP_SUPPORTS_MMAP: u32 = 1;
pub const V4L2_BUF_CAP_SUPPORTS_USERPTR: u32 = 2;
pub const V4L2_BUF_CAP_SUPPORTS_DMABUF: u32 = 4;
pub const V4L2_BUF_CAP_SUPPORTS_REQUESTS: u32 = 8;
pub const V4L2_BUF_CAP_SUPPORTS_ORPHANED_BUFS: u32 = 16;
pub const V4L2_BUF_CAP_SUPPORTS_M2M_HOLD_CAPTURE_BUF: u32 = 32;
pub const V4L2_BUF_CAP_SUPPORTS_MMAP_CACHE_HINTS: u32 = 64;
pub const V4L2_BUF_FLAG_MAPPED: u32 = 1;
pub const V4L2_BUF_FLAG_QUEUED: u32 = 2;
pub const V4L2_BUF_FLAG_DONE: u32 = 4;
pub const V4L2_BUF_FLAG_KEYFRAME: u32 = 8;
pub const V4L2_BUF_FLAG_PFRAME: u32 = 16;
pub const V4L2_BUF_FLAG_BFRAME: u32 = 32;
pub const V4L2_BUF_FLAG_ERROR: u32 = 64;
pub const V4L2_BUF_FLAG_IN_REQUEST: u32 = 128;
pub const V4L2_BUF_FLAG_TIMECODE: u32 = 256;
pub const V4L2_BUF_FLAG_M2M_HOLD_CAPTURE_BUF: u32 = 512;
pub const V4L2_BUF_FLAG_PREPARED: u32 = 1024;
pub const V4L2_BUF_FLAG_NO_CACHE_INVALIDATE: u32 = 2048;
pub const V4L2_BUF_FLAG_NO_CACHE_CLEAN: u32 = 4096;
pub const V4L2_BUF_FLAG_TIMESTAMP_MASK: u32 = 57344;
pub const V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN: u32 = 0;
pub const V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC: u32 = 8192;
pub const V4L2_BUF_FLAG_TIMESTAMP_COPY: u32 = 16384;
pub const V4L2_BUF_FLAG_TSTAMP_SRC_MASK: u32 = 458752;
pub const V4L2_BUF_FLAG_TSTAMP_SRC_EOF: u32 = 0;
pub const V4L2_BUF_FLAG_TSTAMP_SRC_SOE: u32 = 65536;
pub const V4L2_BUF_FLAG_LAST: u32 = 1048576;
pub const V4L2_BUF_FLAG_REQUEST_FD: u32 = 8388608;
pub const V4L2_FBUF_CAP_EXTERNOVERLAY: u32 = 1;
pub const V4L2_FBUF_CAP_CHROMAKEY: u32 = 2;
pub const V4L2_FBUF_CAP_LIST_CLIPPING: u32 = 4;
pub const V4L2_FBUF_CAP_BITMAP_CLIPPING: u32 = 8;
pub const V4L2_FBUF_CAP_LOCAL_ALPHA: u32 = 16;
pub const V4L2_FBUF_CAP_GLOBAL_ALPHA: u32 = 32;
pub const V4L2_FBUF_CAP_LOCAL_INV_ALPHA: u32 = 64;
pub const V4L2_FBUF_CAP_SRC_CHROMAKEY: u32 = 128;
pub const V4L2_FBUF_FLAG_PRIMARY: u32 = 1;
pub const V4L2_FBUF_FLAG_OVERLAY: u32 = 2;
pub const V4L2_FBUF_FLAG_CHROMAKEY: u32 = 4;
pub const V4L2_FBUF_FLAG_LOCAL_ALPHA: u32 = 8;
pub const V4L2_FBUF_FLAG_GLOBAL_ALPHA: u32 = 16;
pub const V4L2_FBUF_FLAG_LOCAL_INV_ALPHA: u32 = 32;
pub const V4L2_FBUF_FLAG_SRC_CHROMAKEY: u32 = 64;
pub const V4L2_MODE_HIGHQUALITY: u32 = 1;
pub const V4L2_CAP_TIMEPERFRAME: u32 = 4096;
pub const V4L2_STD_UNKNOWN: u32 = 0;
pub const V4L2_DV_PROGRESSIVE: u32 = 0;
pub const V4L2_DV_INTERLACED: u32 = 1;
pub const V4L2_DV_VSYNC_POS_POL: u32 = 1;
pub const V4L2_DV_HSYNC_POS_POL: u32 = 2;
pub const V4L2_DV_BT_STD_CEA861: u32 = 1;
pub const V4L2_DV_BT_STD_DMT: u32 = 2;
pub const V4L2_DV_BT_STD_CVT: u32 = 4;
pub const V4L2_DV_BT_STD_GTF: u32 = 8;
pub const V4L2_DV_BT_STD_SDI: u32 = 16;
pub const V4L2_DV_FL_REDUCED_BLANKING: u32 = 1;
pub const V4L2_DV_FL_CAN_REDUCE_FPS: u32 = 2;
pub const V4L2_DV_FL_REDUCED_FPS: u32 = 4;
pub const V4L2_DV_FL_HALF_LINE: u32 = 8;
pub const V4L2_DV_FL_IS_CE_VIDEO: u32 = 16;
pub const V4L2_DV_FL_FIRST_FIELD_EXTRA_LINE: u32 = 32;
pub const V4L2_DV_FL_HAS_PICTURE_ASPECT: u32 = 64;
pub const V4L2_DV_FL_HAS_CEA861_VIC: u32 = 128;
pub const V4L2_DV_FL_HAS_HDMI_VIC: u32 = 256;
pub const V4L2_DV_FL_CAN_DETECT_REDUCED_FPS: u32 = 512;
pub const V4L2_DV_BT_656_1120: u32 = 0;
pub const V4L2_DV_BT_CAP_INTERLACED: u32 = 1;
pub const V4L2_DV_BT_CAP_PROGRESSIVE: u32 = 2;
pub const V4L2_DV_BT_CAP_REDUCED_BLANKING: u32 = 4;
pub const V4L2_DV_BT_CAP_CUSTOM: u32 = 8;
pub const V4L2_INPUT_TYPE_TUNER: u32 = 1;
pub const V4L2_INPUT_TYPE_CAMERA: u32 = 2;
pub const V4L2_INPUT_TYPE_TOUCH: u32 = 3;
pub const V4L2_IN_ST_NO_POWER: u32 = 1;
pub const V4L2_IN_ST_NO_SIGNAL: u32 = 2;
pub const V4L2_IN_ST_NO_COLOR: u32 = 4;
pub const V4L2_IN_ST_HFLIP: u32 = 16;
pub const V4L2_IN_ST_VFLIP: u32 = 32;
pub const V4L2_IN_ST_NO_H_LOCK: u32 = 256;
pub const V4L2_IN_ST_COLOR_KILL: u32 = 512;
pub const V4L2_IN_ST_NO_V_LOCK: u32 = 1024;
pub const V4L2_IN_ST_NO_STD_LOCK: u32 = 2048;
pub const V4L2_IN_ST_NO_SYNC: u32 = 65536;
pub const V4L2_IN_ST_NO_EQU: u32 = 131072;
pub const V4L2_IN_ST_NO_CARRIER: u32 = 262144;
pub const V4L2_IN_ST_MACROVISION: u32 = 16777216;
pub const V4L2_IN_ST_NO_ACCESS: u32 = 33554432;
pub const V4L2_IN_ST_VTR: u32 = 67108864;
pub const V4L2_IN_CAP_DV_TIMINGS: u32 = 2;
pub const V4L2_IN_CAP_CUSTOM_TIMINGS: u32 = 2;
pub const V4L2_IN_CAP_STD: u32 = 4;
pub const V4L2_IN_CAP_NATIVE_SIZE: u32 = 8;
pub const V4L2_OUTPUT_TYPE_MODULATOR: u32 = 1;
pub const V4L2_OUTPUT_TYPE_ANALOG: u32 = 2;
pub const V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY: u32 = 3;
pub const V4L2_OUT_CAP_DV_TIMINGS: u32 = 2;
pub const V4L2_OUT_CAP_CUSTOM_TIMINGS: u32 = 2;
pub const V4L2_OUT_CAP_STD: u32 = 4;
pub const V4L2_OUT_CAP_NATIVE_SIZE: u32 = 8;
pub const V4L2_CTRL_ID_MASK: u32 = 268435455;
pub const V4L2_CTRL_MAX_DIMS: u32 = 4;
pub const V4L2_CTRL_WHICH_CUR_VAL: u32 = 0;
pub const V4L2_CTRL_WHICH_DEF_VAL: u32 = 251658240;
pub const V4L2_CTRL_WHICH_REQUEST_VAL: u32 = 251723776;
pub const V4L2_CTRL_FLAG_DISABLED: u32 = 1;
pub const V4L2_CTRL_FLAG_GRABBED: u32 = 2;
pub const V4L2_CTRL_FLAG_READ_ONLY: u32 = 4;
pub const V4L2_CTRL_FLAG_UPDATE: u32 = 8;
pub const V4L2_CTRL_FLAG_INACTIVE: u32 = 16;
pub const V4L2_CTRL_FLAG_SLIDER: u32 = 32;
pub const V4L2_CTRL_FLAG_WRITE_ONLY: u32 = 64;
pub const V4L2_CTRL_FLAG_VOLATILE: u32 = 128;
pub const V4L2_CTRL_FLAG_HAS_PAYLOAD: u32 = 256;
pub const V4L2_CTRL_FLAG_EXECUTE_ON_WRITE: u32 = 512;
pub const V4L2_CTRL_FLAG_MODIFY_LAYOUT: u32 = 1024;
pub const V4L2_CTRL_FLAG_NEXT_CTRL: u32 = 2147483648;
pub const V4L2_CTRL_FLAG_NEXT_COMPOUND: u32 = 1073741824;
pub const V4L2_CID_MAX_CTRLS: u32 = 1024;
pub const V4L2_CID_PRIVATE_BASE: u32 = 134217728;
pub const V4L2_TUNER_CAP_LOW: u32 = 1;
pub const V4L2_TUNER_CAP_NORM: u32 = 2;
pub const V4L2_TUNER_CAP_HWSEEK_BOUNDED: u32 = 4;
pub const V4L2_TUNER_CAP_HWSEEK_WRAP: u32 = 8;
pub const V4L2_TUNER_CAP_STEREO: u32 = 16;
pub const V4L2_TUNER_CAP_LANG2: u32 = 32;
pub const V4L2_TUNER_CAP_SAP: u32 = 32;
pub const V4L2_TUNER_CAP_LANG1: u32 = 64;
pub const V4L2_TUNER_CAP_RDS: u32 = 128;
pub const V4L2_TUNER_CAP_RDS_BLOCK_IO: u32 = 256;
pub const V4L2_TUNER_CAP_RDS_CONTROLS: u32 = 512;
pub const V4L2_TUNER_CAP_FREQ_BANDS: u32 = 1024;
pub const V4L2_TUNER_CAP_HWSEEK_PROG_LIM: u32 = 2048;
pub const V4L2_TUNER_CAP_1HZ: u32 = 4096;
pub const V4L2_TUNER_SUB_MONO: u32 = 1;
pub const V4L2_TUNER_SUB_STEREO: u32 = 2;
pub const V4L2_TUNER_SUB_LANG2: u32 = 4;
pub const V4L2_TUNER_SUB_SAP: u32 = 4;
pub const V4L2_TUNER_SUB_LANG1: u32 = 8;
pub const V4L2_TUNER_SUB_RDS: u32 = 16;
pub const V4L2_TUNER_MODE_MONO: u32 = 0;
pub const V4L2_TUNER_MODE_STEREO: u32 = 1;
pub const V4L2_TUNER_MODE_LANG2: u32 = 2;
pub const V4L2_TUNER_MODE_SAP: u32 = 2;
pub const V4L2_TUNER_MODE_LANG1: u32 = 3;
pub const V4L2_TUNER_MODE_LANG1_LANG2: u32 = 4;
pub const V4L2_BAND_MODULATION_VSB: u32 = 2;
pub const V4L2_BAND_MODULATION_FM: u32 = 4;
pub const V4L2_BAND_MODULATION_AM: u32 = 8;
pub const V4L2_RDS_BLOCK_MSK: u32 = 7;
pub const V4L2_RDS_BLOCK_A: u32 = 0;
pub const V4L2_RDS_BLOCK_B: u32 = 1;
pub const V4L2_RDS_BLOCK_C: u32 = 2;
pub const V4L2_RDS_BLOCK_D: u32 = 3;
pub const V4L2_RDS_BLOCK_C_ALT: u32 = 4;
pub const V4L2_RDS_BLOCK_INVALID: u32 = 7;
pub const V4L2_RDS_BLOCK_CORRECTED: u32 = 64;
pub const V4L2_RDS_BLOCK_ERROR: u32 = 128;
pub const V4L2_AUDCAP_STEREO: u32 = 1;
pub const V4L2_AUDCAP_AVL: u32 = 2;
pub const V4L2_AUDMODE_AVL: u32 = 1;
pub const V4L2_ENC_IDX_FRAME_I: u32 = 0;
pub const V4L2_ENC_IDX_FRAME_P: u32 = 1;
pub const V4L2_ENC_IDX_FRAME_B: u32 = 2;
pub const V4L2_ENC_IDX_FRAME_MASK: u32 = 15;
pub const V4L2_ENC_IDX_ENTRIES: u32 = 64;
pub const V4L2_ENC_CMD_START: u32 = 0;
pub const V4L2_ENC_CMD_STOP: u32 = 1;
pub const V4L2_ENC_CMD_PAUSE: u32 = 2;
pub const V4L2_ENC_CMD_RESUME: u32 = 3;
pub const V4L2_ENC_CMD_STOP_AT_GOP_END: u32 = 1;
pub const V4L2_DEC_CMD_START: u32 = 0;
pub const V4L2_DEC_CMD_STOP: u32 = 1;
pub const V4L2_DEC_CMD_PAUSE: u32 = 2;
pub const V4L2_DEC_CMD_RESUME: u32 = 3;
pub const V4L2_DEC_CMD_FLUSH: u32 = 4;
pub const V4L2_DEC_CMD_START_MUTE_AUDIO: u32 = 1;
pub const V4L2_DEC_CMD_PAUSE_TO_BLACK: u32 = 1;
pub const V4L2_DEC_CMD_STOP_TO_BLACK: u32 = 1;
pub const V4L2_DEC_CMD_STOP_IMMEDIATELY: u32 = 2;
pub const V4L2_DEC_START_FMT_NONE: u32 = 0;
pub const V4L2_DEC_START_FMT_GOP: u32 = 1;
pub const V4L2_VBI_UNSYNC: u32 = 1;
pub const V4L2_VBI_INTERLACED: u32 = 2;
pub const V4L2_VBI_ITU_525_F1_START: u32 = 1;
pub const V4L2_VBI_ITU_525_F2_START: u32 = 264;
pub const V4L2_VBI_ITU_625_F1_START: u32 = 1;
pub const V4L2_VBI_ITU_625_F2_START: u32 = 314;
pub const V4L2_SLICED_TELETEXT_B: u32 = 1;
pub const V4L2_SLICED_VPS: u32 = 1024;
pub const V4L2_SLICED_CAPTION_525: u32 = 4096;
pub const V4L2_SLICED_WSS_625: u32 = 16384;
pub const V4L2_SLICED_VBI_525: u32 = 4096;
pub const V4L2_SLICED_VBI_625: u32 = 17409;
pub const V4L2_MPEG_VBI_IVTV_TELETEXT_B: u32 = 1;
pub const V4L2_MPEG_VBI_IVTV_CAPTION_525: u32 = 4;
pub const V4L2_MPEG_VBI_IVTV_WSS_625: u32 = 5;
pub const V4L2_MPEG_VBI_IVTV_VPS: u32 = 7;
pub const V4L2_MPEG_VBI_IVTV_MAGIC0: &[u8; 5] = b"itv0\0";
pub const V4L2_MPEG_VBI_IVTV_MAGIC1: &[u8; 5] = b"ITV0\0";
pub const V4L2_EVENT_ALL: u32 = 0;
pub const V4L2_EVENT_VSYNC: u32 = 1;
pub const V4L2_EVENT_EOS: u32 = 2;
pub const V4L2_EVENT_CTRL: u32 = 3;
pub const V4L2_EVENT_FRAME_SYNC: u32 = 4;
pub const V4L2_EVENT_SOURCE_CHANGE: u32 = 5;
pub const V4L2_EVENT_MOTION_DET: u32 = 6;
pub const V4L2_EVENT_PRIVATE_START: u32 = 134217728;
pub const V4L2_EVENT_CTRL_CH_VALUE: u32 = 1;
pub const V4L2_EVENT_CTRL_CH_FLAGS: u32 = 2;
pub const V4L2_EVENT_CTRL_CH_RANGE: u32 = 4;
pub const V4L2_EVENT_SRC_CH_RESOLUTION: u32 = 1;
pub const V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ: u32 = 1;
pub const V4L2_EVENT_SUB_FL_SEND_INITIAL: u32 = 1;
pub const V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK: u32 = 2;
pub const V4L2_CHIP_MATCH_BRIDGE: u32 = 0;
pub const V4L2_CHIP_MATCH_SUBDEV: u32 = 4;
pub const V4L2_CHIP_MATCH_HOST: u32 = 0;
pub const V4L2_CHIP_MATCH_I2C_DRIVER: u32 = 1;
pub const V4L2_CHIP_MATCH_I2C_ADDR: u32 = 2;
pub const V4L2_CHIP_MATCH_AC97: u32 = 3;
pub const V4L2_CHIP_FL_READABLE: u32 = 1;
pub const V4L2_CHIP_FL_WRITABLE: u32 = 2;
pub const BASE_VIDIOC_PRIVATE: u32 = 192;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const IMP_ENC_AVC_PROFILE_IDC_BASELINE: u32 = 66;
pub const IMP_ENC_AVC_PROFILE_IDC_MAIN: u32 = 77;
pub const IMP_ENC_AVC_PROFILE_IDC_HIGH: u32 = 100;
pub const IMP_ENC_HEVC_PROFILE_IDC_MAIN: u32 = 1;
pub const IMP_IVS_MOVE_MAX_ROI_CNT: u32 = 52;
pub const IMP_IVS_DEFAULT_TIMEOUTMS: i32 = -1;
pub const IMP_LOG_OUT_STDOUT: u32 = 0;
pub const IMP_LOG_OUT_LOCAL_FILE: u32 = 1;
pub const IMP_LOG_OUT_SERVER: u32 = 2;
pub const IMP_LOG_OUT_DEFAULT: u32 = 0;
pub const IMP_LOG_OP_PID_SHIFT: u32 = 0;
pub const IMP_LOG_OP_USTIME_SHIFT: u32 = 1;
pub const IMP_LOG_OP_MODULE_SHIFT: u32 = 2;
pub const IMP_LOG_OP_FILE_SHIFT: u32 = 3;
pub const IMP_LOG_OP_FUNC_SHIFT: u32 = 4;
pub const IMP_LOG_OP_LINE_SHIFT: u32 = 5;
pub const IMP_LOG_OP_PID: u32 = 1;
pub const IMP_LOG_OP_USTIME: u32 = 2;
pub const IMP_LOG_OP_MODULE: u32 = 4;
pub const IMP_LOG_OP_FILE: u32 = 8;
pub const IMP_LOG_OP_FUNC: u32 = 16;
pub const IMP_LOG_OP_LINE: u32 = 32;
pub const IMP_LOG_OP_NONE: u32 = 0;
pub const IMP_LOG_OP_ALL: u32 = 63;
pub const IMP_LOG_OP_DEFAULT: u32 = 63;
pub const INVHANDLE: i32 = -1;
pub const DEVICE_ID_MAGIC: &[u8; 5] = b"53ef\0";
pub const DEVICE_ID_MAGIC_LEN: u32 = 4;
pub const DEVICE_ID_LEN: u32 = 32;
pub const MAX_INFO_LEN: u32 = 64;
pub const REINIT: i32 = -10;
pub const INIT_FAILED: i32 = -11;
pub const FAILED_GETHANDLE: i32 = -12;
pub const INVALID_PARA: i32 = -13;
pub const SET_PARA_FAILED: i32 = -14;
pub const FAILURE: i32 = -15;
pub const SET_DATALEN_ERR: i32 = -16;
pub const EXIT_ERR: i32 = -17;
pub const UNINIT: i32 = -18;
pub const FAILED_DESHANDLE: i32 = -19;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const IMPBlock_BLOCK: IMPBlock = 0;
pub const IMPBlock_NOBLOCK: IMPBlock = 1;
pub type IMPBlock = ::std::os::raw::c_uint;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_8000: IMPAudioSampleRate = 8000;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_16000: IMPAudioSampleRate = 16000;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_24000: IMPAudioSampleRate = 24000;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_32000: IMPAudioSampleRate = 32000;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_44100: IMPAudioSampleRate = 44100;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_48000: IMPAudioSampleRate = 48000;
pub const IMPAudioSampleRate_AUDIO_SAMPLE_RATE_96000: IMPAudioSampleRate = 96000;
pub type IMPAudioSampleRate = ::std::os::raw::c_uint;
pub const IMPAudioBitWidth_AUDIO_BIT_WIDTH_16: IMPAudioBitWidth = 16;
pub type IMPAudioBitWidth = ::std::os::raw::c_uint;
pub const IMPAudioSoundMode_AUDIO_SOUND_MODE_MONO: IMPAudioSoundMode = 1;
pub const IMPAudioSoundMode_AUDIO_SOUND_MODE_STEREO: IMPAudioSoundMode = 2;
pub type IMPAudioSoundMode = ::std::os::raw::c_uint;
pub const IMPAudioPalyloadType_PT_PCM: IMPAudioPalyloadType = 0;
pub const IMPAudioPalyloadType_PT_G711A: IMPAudioPalyloadType = 1;
pub const IMPAudioPalyloadType_PT_G711U: IMPAudioPalyloadType = 2;
pub const IMPAudioPalyloadType_PT_G726: IMPAudioPalyloadType = 3;
pub const IMPAudioPalyloadType_PT_AEC: IMPAudioPalyloadType = 4;
pub const IMPAudioPalyloadType_PT_ADPCM: IMPAudioPalyloadType = 5;
pub const IMPAudioPalyloadType_PT_MAX: IMPAudioPalyloadType = 6;
pub type IMPAudioPalyloadType = ::std::os::raw::c_uint;
pub const IMPAudioDecMode_ADEC_MODE_PACK: IMPAudioDecMode = 0;
pub const IMPAudioDecMode_ADEC_MODE_STREAM: IMPAudioDecMode = 1;
pub type IMPAudioDecMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioIOAttr {
    pub samplerate: IMPAudioSampleRate,
    pub bitwidth: IMPAudioBitWidth,
    pub soundmode: IMPAudioSoundMode,
    pub frmNum: ::std::os::raw::c_int,
    pub numPerFrm: ::std::os::raw::c_int,
    pub chnCnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioFrame {
    pub bitwidth: IMPAudioBitWidth,
    pub soundmode: IMPAudioSoundMode,
    pub virAddr: *mut u32,
    pub phyAddr: u32,
    pub timeStamp: i64,
    pub seq: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioIChnParam {
    pub usrFrmDepth: ::std::os::raw::c_int,
    pub Rev: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioOChnState {
    pub chnTotalNum: ::std::os::raw::c_int,
    pub chnFreeNum: ::std::os::raw::c_int,
    pub chnBusyNum: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioStream {
    pub stream: *mut u8,
    pub phyAddr: u32,
    pub len: ::std::os::raw::c_int,
    pub timeStamp: i64,
    pub seq: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioEncChnAttr {
    pub type_: IMPAudioPalyloadType,
    pub bufSize: ::std::os::raw::c_int,
    pub value: *mut u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioEncEncoder {
    pub type_: IMPAudioPalyloadType,
    pub maxFrmLen: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 16usize],
    pub openEncoder: ::std::option::Option<
        unsafe extern "C" fn(
            encoderAttr: *mut ::std::os::raw::c_void,
            encoder: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub encoderFrm: ::std::option::Option<
        unsafe extern "C" fn(
            encoder: *mut ::std::os::raw::c_void,
            data: *mut IMPAudioFrame,
            outbuf: *mut ::std::os::raw::c_uchar,
            outLen: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub closeEncoder: ::std::option::Option<
        unsafe extern "C" fn(encoder: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioDecChnAttr {
    pub type_: IMPAudioPalyloadType,
    pub bufSize: ::std::os::raw::c_int,
    pub mode: IMPAudioDecMode,
    pub value: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioDecDecoder {
    pub type_: IMPAudioPalyloadType,
    pub name: [::std::os::raw::c_char; 16usize],
    pub openDecoder: ::std::option::Option<
        unsafe extern "C" fn(
            decoderAttr: *mut ::std::os::raw::c_void,
            decoder: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub decodeFrm: ::std::option::Option<
        unsafe extern "C" fn(
            decoder: *mut ::std::os::raw::c_void,
            inbuf: *mut ::std::os::raw::c_uchar,
            inLen: ::std::os::raw::c_int,
            outbuf: *mut ::std::os::raw::c_ushort,
            outLen: *mut ::std::os::raw::c_int,
            chns: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getFrmInfo: ::std::option::Option<
        unsafe extern "C" fn(
            decoder: *mut ::std::os::raw::c_void,
            info: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub closeDecoder: ::std::option::Option<
        unsafe extern "C" fn(decoder: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPAudioAgcConfig {
    pub TargetLevelDbfs: ::std::os::raw::c_int,
    pub CompressionGaindB: ::std::os::raw::c_int,
}
pub const Level_ns_NS_LOW: Level_ns = 0;
pub const Level_ns_NS_MODERATE: Level_ns = 1;
pub const Level_ns_NS_HIGH: Level_ns = 2;
pub const Level_ns_NS_VERYHIGH: Level_ns = 3;
pub type Level_ns = ::std::os::raw::c_uint;
extern "C" {
    pub fn IMP_AI_SetPubAttr(
        audioDevId: ::std::os::raw::c_int,
        attr: *mut IMPAudioIOAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetPubAttr(
        audioDevId: ::std::os::raw::c_int,
        attr: *mut IMPAudioIOAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_Enable(audioDevId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_Disable(audioDevId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_EnableChn(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_DisableChn(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_PollingFrame(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetFrame(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        frm: *mut IMPAudioFrame,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_ReleaseFrame(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        frm: *mut IMPAudioFrame,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_SetChnParam(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        chnParam: *mut IMPAudioIChnParam,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetChnParam(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        chnParam: *mut IMPAudioIChnParam,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_EnableAec(
        aiDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        aoDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_DisableAec(
        aiDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_EnableNs(
        attr: *mut IMPAudioIOAttr,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_DisableNs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_EnableAgc(
        attr: *mut IMPAudioIOAttr,
        agcConfig: IMPAudioAgcConfig,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_DisableAgc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_EnableAgc(
        attr: *mut IMPAudioIOAttr,
        agcConfig: IMPAudioAgcConfig,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_DisableAgc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_EnableHpf(attr: *mut IMPAudioIOAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_DisableHpf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_EnableHpf(attr: *mut IMPAudioIOAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_DisableHpf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_SetPubAttr(
        audioDevId: ::std::os::raw::c_int,
        attr: *mut IMPAudioIOAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_GetPubAttr(
        audioDevId: ::std::os::raw::c_int,
        attr: *mut IMPAudioIOAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_Enable(audioDevId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_Disable(audioDevId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_EnableChn(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_DisableChn(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_SendFrame(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        data: *mut IMPAudioFrame,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_PauseChn(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_ResumeChn(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_ClearChnBuf(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_QueryChnStat(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        status: *mut IMPAudioOChnState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_CreateChn(
        aeChn: ::std::os::raw::c_int,
        attr: *mut IMPAudioEncChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_DestroyChn(aeChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_SendFrame(
        aeChn: ::std::os::raw::c_int,
        frm: *mut IMPAudioFrame,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_PollingStream(
        AeChn: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_GetStream(
        aeChn: ::std::os::raw::c_int,
        stream: *mut IMPAudioStream,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_ReleaseStream(
        aeChn: ::std::os::raw::c_int,
        stream: *mut IMPAudioStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_RegisterEncoder(
        handle: *mut ::std::os::raw::c_int,
        encoder: *mut IMPAudioEncEncoder,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AENC_ReleaseEncoder(handle: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_CreateChn(
        adChn: ::std::os::raw::c_int,
        attr: *mut IMPAudioDecChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_DestroyChn(adChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_SendStream(
        adChn: ::std::os::raw::c_int,
        stream: *mut IMPAudioStream,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_PollingStream(
        AdChn: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_GetStream(
        adChn: ::std::os::raw::c_int,
        stream: *mut IMPAudioStream,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_ReleaseStream(
        adChn: ::std::os::raw::c_int,
        stream: *mut IMPAudioStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_ClearChnBuf(adChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_RegisterDecoder(
        handle: *mut ::std::os::raw::c_int,
        decoder: *mut IMPAudioDecDecoder,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ADEC_ReleaseDecoder(handle: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_SetVol(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        aiVol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetVol(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        vol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_SetVolMute(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        mute: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_SetVol(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        aoVol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_GetVol(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        vol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_SetVolMute(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        mute: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_SetGain(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        aiGain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetGain(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        aiGain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_SetAlcGain(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        aiPgaGain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetAlcGain(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        aiPgaGain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_SetGain(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        aoGain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_GetGain(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        aoGain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_Soft_Mute(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_Soft_UNMute(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_GetFrameAndRef(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        frm: *mut IMPAudioFrame,
        ref_: *mut IMPAudioFrame,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_EnableAecRefFrame(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        audioAoDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AI_DisableAecRefFrame(
        audioDevId: ::std::os::raw::c_int,
        aiChn: ::std::os::raw::c_int,
        audioAoDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_CacheSwitch(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
        cache_en: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_AO_FlushChnBuf(
        audioDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type sigset_t = __sigset_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_edid {
    pub pad: __u32,
    pub start_block: __u32,
    pub blocks: __u32,
    pub reserved: [__u32; 5usize],
    pub edid: *mut __u8,
}
pub const v4l2_power_line_frequency_V4L2_CID_POWER_LINE_FREQUENCY_DISABLED:
    v4l2_power_line_frequency = 0;
pub const v4l2_power_line_frequency_V4L2_CID_POWER_LINE_FREQUENCY_50HZ: v4l2_power_line_frequency =
    1;
pub const v4l2_power_line_frequency_V4L2_CID_POWER_LINE_FREQUENCY_60HZ: v4l2_power_line_frequency =
    2;
pub const v4l2_power_line_frequency_V4L2_CID_POWER_LINE_FREQUENCY_AUTO: v4l2_power_line_frequency =
    3;
pub type v4l2_power_line_frequency = ::std::os::raw::c_uint;
pub const v4l2_colorfx_V4L2_COLORFX_NONE: v4l2_colorfx = 0;
pub const v4l2_colorfx_V4L2_COLORFX_BW: v4l2_colorfx = 1;
pub const v4l2_colorfx_V4L2_COLORFX_SEPIA: v4l2_colorfx = 2;
pub const v4l2_colorfx_V4L2_COLORFX_NEGATIVE: v4l2_colorfx = 3;
pub const v4l2_colorfx_V4L2_COLORFX_EMBOSS: v4l2_colorfx = 4;
pub const v4l2_colorfx_V4L2_COLORFX_SKETCH: v4l2_colorfx = 5;
pub const v4l2_colorfx_V4L2_COLORFX_SKY_BLUE: v4l2_colorfx = 6;
pub const v4l2_colorfx_V4L2_COLORFX_GRASS_GREEN: v4l2_colorfx = 7;
pub const v4l2_colorfx_V4L2_COLORFX_SKIN_WHITEN: v4l2_colorfx = 8;
pub const v4l2_colorfx_V4L2_COLORFX_VIVID: v4l2_colorfx = 9;
pub const v4l2_colorfx_V4L2_COLORFX_AQUA: v4l2_colorfx = 10;
pub const v4l2_colorfx_V4L2_COLORFX_ART_FREEZE: v4l2_colorfx = 11;
pub const v4l2_colorfx_V4L2_COLORFX_SILHOUETTE: v4l2_colorfx = 12;
pub const v4l2_colorfx_V4L2_COLORFX_SOLARIZATION: v4l2_colorfx = 13;
pub const v4l2_colorfx_V4L2_COLORFX_ANTIQUE: v4l2_colorfx = 14;
pub const v4l2_colorfx_V4L2_COLORFX_SET_CBCR: v4l2_colorfx = 15;
pub type v4l2_colorfx = ::std::os::raw::c_uint;
pub const v4l2_mpeg_stream_type_V4L2_MPEG_STREAM_TYPE_MPEG2_PS: v4l2_mpeg_stream_type = 0;
pub const v4l2_mpeg_stream_type_V4L2_MPEG_STREAM_TYPE_MPEG2_TS: v4l2_mpeg_stream_type = 1;
pub const v4l2_mpeg_stream_type_V4L2_MPEG_STREAM_TYPE_MPEG1_SS: v4l2_mpeg_stream_type = 2;
pub const v4l2_mpeg_stream_type_V4L2_MPEG_STREAM_TYPE_MPEG2_DVD: v4l2_mpeg_stream_type = 3;
pub const v4l2_mpeg_stream_type_V4L2_MPEG_STREAM_TYPE_MPEG1_VCD: v4l2_mpeg_stream_type = 4;
pub const v4l2_mpeg_stream_type_V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD: v4l2_mpeg_stream_type = 5;
pub type v4l2_mpeg_stream_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_stream_vbi_fmt_V4L2_MPEG_STREAM_VBI_FMT_NONE: v4l2_mpeg_stream_vbi_fmt = 0;
pub const v4l2_mpeg_stream_vbi_fmt_V4L2_MPEG_STREAM_VBI_FMT_IVTV: v4l2_mpeg_stream_vbi_fmt = 1;
pub type v4l2_mpeg_stream_vbi_fmt = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_sampling_freq_V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100:
    v4l2_mpeg_audio_sampling_freq = 0;
pub const v4l2_mpeg_audio_sampling_freq_V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000:
    v4l2_mpeg_audio_sampling_freq = 1;
pub const v4l2_mpeg_audio_sampling_freq_V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000:
    v4l2_mpeg_audio_sampling_freq = 2;
pub type v4l2_mpeg_audio_sampling_freq = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_encoding_V4L2_MPEG_AUDIO_ENCODING_LAYER_1: v4l2_mpeg_audio_encoding = 0;
pub const v4l2_mpeg_audio_encoding_V4L2_MPEG_AUDIO_ENCODING_LAYER_2: v4l2_mpeg_audio_encoding = 1;
pub const v4l2_mpeg_audio_encoding_V4L2_MPEG_AUDIO_ENCODING_LAYER_3: v4l2_mpeg_audio_encoding = 2;
pub const v4l2_mpeg_audio_encoding_V4L2_MPEG_AUDIO_ENCODING_AAC: v4l2_mpeg_audio_encoding = 3;
pub const v4l2_mpeg_audio_encoding_V4L2_MPEG_AUDIO_ENCODING_AC3: v4l2_mpeg_audio_encoding = 4;
pub type v4l2_mpeg_audio_encoding = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_32K: v4l2_mpeg_audio_l1_bitrate = 0;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_64K: v4l2_mpeg_audio_l1_bitrate = 1;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_96K: v4l2_mpeg_audio_l1_bitrate = 2;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_128K: v4l2_mpeg_audio_l1_bitrate =
    3;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_160K: v4l2_mpeg_audio_l1_bitrate =
    4;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_192K: v4l2_mpeg_audio_l1_bitrate =
    5;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_224K: v4l2_mpeg_audio_l1_bitrate =
    6;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_256K: v4l2_mpeg_audio_l1_bitrate =
    7;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_288K: v4l2_mpeg_audio_l1_bitrate =
    8;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_320K: v4l2_mpeg_audio_l1_bitrate =
    9;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_352K: v4l2_mpeg_audio_l1_bitrate =
    10;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_384K: v4l2_mpeg_audio_l1_bitrate =
    11;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_416K: v4l2_mpeg_audio_l1_bitrate =
    12;
pub const v4l2_mpeg_audio_l1_bitrate_V4L2_MPEG_AUDIO_L1_BITRATE_448K: v4l2_mpeg_audio_l1_bitrate =
    13;
pub type v4l2_mpeg_audio_l1_bitrate = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_32K: v4l2_mpeg_audio_l2_bitrate = 0;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_48K: v4l2_mpeg_audio_l2_bitrate = 1;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_56K: v4l2_mpeg_audio_l2_bitrate = 2;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_64K: v4l2_mpeg_audio_l2_bitrate = 3;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_80K: v4l2_mpeg_audio_l2_bitrate = 4;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_96K: v4l2_mpeg_audio_l2_bitrate = 5;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_112K: v4l2_mpeg_audio_l2_bitrate =
    6;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_128K: v4l2_mpeg_audio_l2_bitrate =
    7;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_160K: v4l2_mpeg_audio_l2_bitrate =
    8;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_192K: v4l2_mpeg_audio_l2_bitrate =
    9;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_224K: v4l2_mpeg_audio_l2_bitrate =
    10;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_256K: v4l2_mpeg_audio_l2_bitrate =
    11;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_320K: v4l2_mpeg_audio_l2_bitrate =
    12;
pub const v4l2_mpeg_audio_l2_bitrate_V4L2_MPEG_AUDIO_L2_BITRATE_384K: v4l2_mpeg_audio_l2_bitrate =
    13;
pub type v4l2_mpeg_audio_l2_bitrate = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_32K: v4l2_mpeg_audio_l3_bitrate = 0;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_40K: v4l2_mpeg_audio_l3_bitrate = 1;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_48K: v4l2_mpeg_audio_l3_bitrate = 2;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_56K: v4l2_mpeg_audio_l3_bitrate = 3;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_64K: v4l2_mpeg_audio_l3_bitrate = 4;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_80K: v4l2_mpeg_audio_l3_bitrate = 5;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_96K: v4l2_mpeg_audio_l3_bitrate = 6;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_112K: v4l2_mpeg_audio_l3_bitrate =
    7;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_128K: v4l2_mpeg_audio_l3_bitrate =
    8;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_160K: v4l2_mpeg_audio_l3_bitrate =
    9;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_192K: v4l2_mpeg_audio_l3_bitrate =
    10;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_224K: v4l2_mpeg_audio_l3_bitrate =
    11;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_256K: v4l2_mpeg_audio_l3_bitrate =
    12;
pub const v4l2_mpeg_audio_l3_bitrate_V4L2_MPEG_AUDIO_L3_BITRATE_320K: v4l2_mpeg_audio_l3_bitrate =
    13;
pub type v4l2_mpeg_audio_l3_bitrate = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_mode_V4L2_MPEG_AUDIO_MODE_STEREO: v4l2_mpeg_audio_mode = 0;
pub const v4l2_mpeg_audio_mode_V4L2_MPEG_AUDIO_MODE_JOINT_STEREO: v4l2_mpeg_audio_mode = 1;
pub const v4l2_mpeg_audio_mode_V4L2_MPEG_AUDIO_MODE_DUAL: v4l2_mpeg_audio_mode = 2;
pub const v4l2_mpeg_audio_mode_V4L2_MPEG_AUDIO_MODE_MONO: v4l2_mpeg_audio_mode = 3;
pub type v4l2_mpeg_audio_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_mode_extension_V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4:
    v4l2_mpeg_audio_mode_extension = 0;
pub const v4l2_mpeg_audio_mode_extension_V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8:
    v4l2_mpeg_audio_mode_extension = 1;
pub const v4l2_mpeg_audio_mode_extension_V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12:
    v4l2_mpeg_audio_mode_extension = 2;
pub const v4l2_mpeg_audio_mode_extension_V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16:
    v4l2_mpeg_audio_mode_extension = 3;
pub type v4l2_mpeg_audio_mode_extension = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_emphasis_V4L2_MPEG_AUDIO_EMPHASIS_NONE: v4l2_mpeg_audio_emphasis = 0;
pub const v4l2_mpeg_audio_emphasis_V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS: v4l2_mpeg_audio_emphasis =
    1;
pub const v4l2_mpeg_audio_emphasis_V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17: v4l2_mpeg_audio_emphasis = 2;
pub type v4l2_mpeg_audio_emphasis = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_crc_V4L2_MPEG_AUDIO_CRC_NONE: v4l2_mpeg_audio_crc = 0;
pub const v4l2_mpeg_audio_crc_V4L2_MPEG_AUDIO_CRC_CRC16: v4l2_mpeg_audio_crc = 1;
pub type v4l2_mpeg_audio_crc = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_32K: v4l2_mpeg_audio_ac3_bitrate =
    0;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_40K: v4l2_mpeg_audio_ac3_bitrate =
    1;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_48K: v4l2_mpeg_audio_ac3_bitrate =
    2;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_56K: v4l2_mpeg_audio_ac3_bitrate =
    3;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_64K: v4l2_mpeg_audio_ac3_bitrate =
    4;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_80K: v4l2_mpeg_audio_ac3_bitrate =
    5;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_96K: v4l2_mpeg_audio_ac3_bitrate =
    6;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_112K:
    v4l2_mpeg_audio_ac3_bitrate = 7;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_128K:
    v4l2_mpeg_audio_ac3_bitrate = 8;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_160K:
    v4l2_mpeg_audio_ac3_bitrate = 9;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_192K:
    v4l2_mpeg_audio_ac3_bitrate = 10;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_224K:
    v4l2_mpeg_audio_ac3_bitrate = 11;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_256K:
    v4l2_mpeg_audio_ac3_bitrate = 12;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_320K:
    v4l2_mpeg_audio_ac3_bitrate = 13;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_384K:
    v4l2_mpeg_audio_ac3_bitrate = 14;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_448K:
    v4l2_mpeg_audio_ac3_bitrate = 15;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_512K:
    v4l2_mpeg_audio_ac3_bitrate = 16;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_576K:
    v4l2_mpeg_audio_ac3_bitrate = 17;
pub const v4l2_mpeg_audio_ac3_bitrate_V4L2_MPEG_AUDIO_AC3_BITRATE_640K:
    v4l2_mpeg_audio_ac3_bitrate = 18;
pub type v4l2_mpeg_audio_ac3_bitrate = ::std::os::raw::c_uint;
pub const v4l2_mpeg_audio_dec_playback_V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO:
    v4l2_mpeg_audio_dec_playback = 0;
pub const v4l2_mpeg_audio_dec_playback_V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO:
    v4l2_mpeg_audio_dec_playback = 1;
pub const v4l2_mpeg_audio_dec_playback_V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT:
    v4l2_mpeg_audio_dec_playback = 2;
pub const v4l2_mpeg_audio_dec_playback_V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT:
    v4l2_mpeg_audio_dec_playback = 3;
pub const v4l2_mpeg_audio_dec_playback_V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO:
    v4l2_mpeg_audio_dec_playback = 4;
pub const v4l2_mpeg_audio_dec_playback_V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO:
    v4l2_mpeg_audio_dec_playback = 5;
pub type v4l2_mpeg_audio_dec_playback = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_encoding_V4L2_MPEG_VIDEO_ENCODING_MPEG_1: v4l2_mpeg_video_encoding = 0;
pub const v4l2_mpeg_video_encoding_V4L2_MPEG_VIDEO_ENCODING_MPEG_2: v4l2_mpeg_video_encoding = 1;
pub const v4l2_mpeg_video_encoding_V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC: v4l2_mpeg_video_encoding =
    2;
pub type v4l2_mpeg_video_encoding = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_aspect_V4L2_MPEG_VIDEO_ASPECT_1x1: v4l2_mpeg_video_aspect = 0;
pub const v4l2_mpeg_video_aspect_V4L2_MPEG_VIDEO_ASPECT_4x3: v4l2_mpeg_video_aspect = 1;
pub const v4l2_mpeg_video_aspect_V4L2_MPEG_VIDEO_ASPECT_16x9: v4l2_mpeg_video_aspect = 2;
pub const v4l2_mpeg_video_aspect_V4L2_MPEG_VIDEO_ASPECT_221x100: v4l2_mpeg_video_aspect = 3;
pub type v4l2_mpeg_video_aspect = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_bitrate_mode_V4L2_MPEG_VIDEO_BITRATE_MODE_VBR:
    v4l2_mpeg_video_bitrate_mode = 0;
pub const v4l2_mpeg_video_bitrate_mode_V4L2_MPEG_VIDEO_BITRATE_MODE_CBR:
    v4l2_mpeg_video_bitrate_mode = 1;
pub const v4l2_mpeg_video_bitrate_mode_V4L2_MPEG_VIDEO_BITRATE_MODE_CQ:
    v4l2_mpeg_video_bitrate_mode = 2;
pub type v4l2_mpeg_video_bitrate_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_header_mode_V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE:
    v4l2_mpeg_video_header_mode = 0;
pub const v4l2_mpeg_video_header_mode_V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME:
    v4l2_mpeg_video_header_mode = 1;
pub type v4l2_mpeg_video_header_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_multi_slice_mode_V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE:
    v4l2_mpeg_video_multi_slice_mode = 0;
pub const v4l2_mpeg_video_multi_slice_mode_V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB:
    v4l2_mpeg_video_multi_slice_mode = 1;
pub const v4l2_mpeg_video_multi_slice_mode_V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES:
    v4l2_mpeg_video_multi_slice_mode = 2;
pub const v4l2_mpeg_video_multi_slice_mode_V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB:
    v4l2_mpeg_video_multi_slice_mode = 1;
pub const v4l2_mpeg_video_multi_slice_mode_V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES:
    v4l2_mpeg_video_multi_slice_mode = 2;
pub type v4l2_mpeg_video_multi_slice_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_mpeg2_level_V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW: v4l2_mpeg_video_mpeg2_level =
    0;
pub const v4l2_mpeg_video_mpeg2_level_V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN:
    v4l2_mpeg_video_mpeg2_level = 1;
pub const v4l2_mpeg_video_mpeg2_level_V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440:
    v4l2_mpeg_video_mpeg2_level = 2;
pub const v4l2_mpeg_video_mpeg2_level_V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH:
    v4l2_mpeg_video_mpeg2_level = 3;
pub type v4l2_mpeg_video_mpeg2_level = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_mpeg2_profile_V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE:
    v4l2_mpeg_video_mpeg2_profile = 0;
pub const v4l2_mpeg_video_mpeg2_profile_V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN:
    v4l2_mpeg_video_mpeg2_profile = 1;
pub const v4l2_mpeg_video_mpeg2_profile_V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE:
    v4l2_mpeg_video_mpeg2_profile = 2;
pub const v4l2_mpeg_video_mpeg2_profile_V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE:
    v4l2_mpeg_video_mpeg2_profile = 3;
pub const v4l2_mpeg_video_mpeg2_profile_V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH:
    v4l2_mpeg_video_mpeg2_profile = 4;
pub const v4l2_mpeg_video_mpeg2_profile_V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW:
    v4l2_mpeg_video_mpeg2_profile = 5;
pub type v4l2_mpeg_video_mpeg2_profile = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_entropy_mode_V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC:
    v4l2_mpeg_video_h264_entropy_mode = 0;
pub const v4l2_mpeg_video_h264_entropy_mode_V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC:
    v4l2_mpeg_video_h264_entropy_mode = 1;
pub type v4l2_mpeg_video_h264_entropy_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_1_0: v4l2_mpeg_video_h264_level = 0;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_1B: v4l2_mpeg_video_h264_level = 1;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_1_1: v4l2_mpeg_video_h264_level = 2;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_1_2: v4l2_mpeg_video_h264_level = 3;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_1_3: v4l2_mpeg_video_h264_level = 4;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_2_0: v4l2_mpeg_video_h264_level = 5;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_2_1: v4l2_mpeg_video_h264_level = 6;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_2_2: v4l2_mpeg_video_h264_level = 7;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_3_0: v4l2_mpeg_video_h264_level = 8;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_3_1: v4l2_mpeg_video_h264_level = 9;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_3_2: v4l2_mpeg_video_h264_level =
    10;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_4_0: v4l2_mpeg_video_h264_level =
    11;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_4_1: v4l2_mpeg_video_h264_level =
    12;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_4_2: v4l2_mpeg_video_h264_level =
    13;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_5_0: v4l2_mpeg_video_h264_level =
    14;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_5_1: v4l2_mpeg_video_h264_level =
    15;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_5_2: v4l2_mpeg_video_h264_level =
    16;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_6_0: v4l2_mpeg_video_h264_level =
    17;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_6_1: v4l2_mpeg_video_h264_level =
    18;
pub const v4l2_mpeg_video_h264_level_V4L2_MPEG_VIDEO_H264_LEVEL_6_2: v4l2_mpeg_video_h264_level =
    19;
pub type v4l2_mpeg_video_h264_level = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_loop_filter_mode_V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED:
    v4l2_mpeg_video_h264_loop_filter_mode = 0;
pub const v4l2_mpeg_video_h264_loop_filter_mode_V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED:
    v4l2_mpeg_video_h264_loop_filter_mode = 1;
pub const v4l2_mpeg_video_h264_loop_filter_mode_V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY : v4l2_mpeg_video_h264_loop_filter_mode = 2 ;
pub type v4l2_mpeg_video_h264_loop_filter_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE:
    v4l2_mpeg_video_h264_profile = 0;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE:
    v4l2_mpeg_video_h264_profile = 1;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_MAIN:
    v4l2_mpeg_video_h264_profile = 2;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED:
    v4l2_mpeg_video_h264_profile = 3;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH:
    v4l2_mpeg_video_h264_profile = 4;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10:
    v4l2_mpeg_video_h264_profile = 5;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422:
    v4l2_mpeg_video_h264_profile = 6;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE:
    v4l2_mpeg_video_h264_profile = 7;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA:
    v4l2_mpeg_video_h264_profile = 8;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA:
    v4l2_mpeg_video_h264_profile = 9;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA:
    v4l2_mpeg_video_h264_profile = 10;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA:
    v4l2_mpeg_video_h264_profile = 11;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE:
    v4l2_mpeg_video_h264_profile = 12;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH:
    v4l2_mpeg_video_h264_profile = 13;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA:
    v4l2_mpeg_video_h264_profile = 14;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH:
    v4l2_mpeg_video_h264_profile = 15;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH:
    v4l2_mpeg_video_h264_profile = 16;
pub const v4l2_mpeg_video_h264_profile_V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_HIGH:
    v4l2_mpeg_video_h264_profile = 17;
pub type v4l2_mpeg_video_h264_profile = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED:
    v4l2_mpeg_video_h264_vui_sar_idc = 0;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1:
    v4l2_mpeg_video_h264_vui_sar_idc = 1;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 2;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 3;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 4;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33:
    v4l2_mpeg_video_h264_vui_sar_idc = 5;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 6;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 7;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 8;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33:
    v4l2_mpeg_video_h264_vui_sar_idc = 9;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 10;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11:
    v4l2_mpeg_video_h264_vui_sar_idc = 11;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33:
    v4l2_mpeg_video_h264_vui_sar_idc = 12;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99:
    v4l2_mpeg_video_h264_vui_sar_idc = 13;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3:
    v4l2_mpeg_video_h264_vui_sar_idc = 14;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2:
    v4l2_mpeg_video_h264_vui_sar_idc = 15;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1:
    v4l2_mpeg_video_h264_vui_sar_idc = 16;
pub const v4l2_mpeg_video_h264_vui_sar_idc_V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED:
    v4l2_mpeg_video_h264_vui_sar_idc = 17;
pub type v4l2_mpeg_video_h264_vui_sar_idc = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_sei_fp_arrangement_type_V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD : v4l2_mpeg_video_h264_sei_fp_arrangement_type = 0 ;
pub const v4l2_mpeg_video_h264_sei_fp_arrangement_type_V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN : v4l2_mpeg_video_h264_sei_fp_arrangement_type = 1 ;
pub const v4l2_mpeg_video_h264_sei_fp_arrangement_type_V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW : v4l2_mpeg_video_h264_sei_fp_arrangement_type = 2 ;
pub const v4l2_mpeg_video_h264_sei_fp_arrangement_type_V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE : v4l2_mpeg_video_h264_sei_fp_arrangement_type = 3 ;
pub const v4l2_mpeg_video_h264_sei_fp_arrangement_type_V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM : v4l2_mpeg_video_h264_sei_fp_arrangement_type = 4 ;
pub const v4l2_mpeg_video_h264_sei_fp_arrangement_type_V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL : v4l2_mpeg_video_h264_sei_fp_arrangement_type = 5 ;
pub type v4l2_mpeg_video_h264_sei_fp_arrangement_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES:
    v4l2_mpeg_video_h264_fmo_map_type = 0;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES:
    v4l2_mpeg_video_h264_fmo_map_type = 1;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER : v4l2_mpeg_video_h264_fmo_map_type = 2 ;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT:
    v4l2_mpeg_video_h264_fmo_map_type = 3;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN:
    v4l2_mpeg_video_h264_fmo_map_type = 4;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN:
    v4l2_mpeg_video_h264_fmo_map_type = 5;
pub const v4l2_mpeg_video_h264_fmo_map_type_V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT:
    v4l2_mpeg_video_h264_fmo_map_type = 6;
pub type v4l2_mpeg_video_h264_fmo_map_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_fmo_change_dir_V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT:
    v4l2_mpeg_video_h264_fmo_change_dir = 0;
pub const v4l2_mpeg_video_h264_fmo_change_dir_V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT:
    v4l2_mpeg_video_h264_fmo_change_dir = 1;
pub type v4l2_mpeg_video_h264_fmo_change_dir = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_h264_hierarchical_coding_type_V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B : v4l2_mpeg_video_h264_hierarchical_coding_type = 0 ;
pub const v4l2_mpeg_video_h264_hierarchical_coding_type_V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P : v4l2_mpeg_video_h264_hierarchical_coding_type = 1 ;
pub type v4l2_mpeg_video_h264_hierarchical_coding_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_0: v4l2_mpeg_video_mpeg4_level =
    0;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B: v4l2_mpeg_video_mpeg4_level =
    1;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_1: v4l2_mpeg_video_mpeg4_level =
    2;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_2: v4l2_mpeg_video_mpeg4_level =
    3;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_3: v4l2_mpeg_video_mpeg4_level =
    4;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B: v4l2_mpeg_video_mpeg4_level =
    5;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_4: v4l2_mpeg_video_mpeg4_level =
    6;
pub const v4l2_mpeg_video_mpeg4_level_V4L2_MPEG_VIDEO_MPEG4_LEVEL_5: v4l2_mpeg_video_mpeg4_level =
    7;
pub type v4l2_mpeg_video_mpeg4_level = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_mpeg4_profile_V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE:
    v4l2_mpeg_video_mpeg4_profile = 0;
pub const v4l2_mpeg_video_mpeg4_profile_V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE:
    v4l2_mpeg_video_mpeg4_profile = 1;
pub const v4l2_mpeg_video_mpeg4_profile_V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE:
    v4l2_mpeg_video_mpeg4_profile = 2;
pub const v4l2_mpeg_video_mpeg4_profile_V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE:
    v4l2_mpeg_video_mpeg4_profile = 3;
pub const v4l2_mpeg_video_mpeg4_profile_V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY:
    v4l2_mpeg_video_mpeg4_profile = 4;
pub type v4l2_mpeg_video_mpeg4_profile = ::std::os::raw::c_uint;
pub const v4l2_vp8_num_partitions_V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION: v4l2_vp8_num_partitions = 0;
pub const v4l2_vp8_num_partitions_V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS: v4l2_vp8_num_partitions = 1;
pub const v4l2_vp8_num_partitions_V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS: v4l2_vp8_num_partitions = 2;
pub const v4l2_vp8_num_partitions_V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS: v4l2_vp8_num_partitions = 3;
pub type v4l2_vp8_num_partitions = ::std::os::raw::c_uint;
pub const v4l2_vp8_num_ref_frames_V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME: v4l2_vp8_num_ref_frames = 0;
pub const v4l2_vp8_num_ref_frames_V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME: v4l2_vp8_num_ref_frames = 1;
pub const v4l2_vp8_num_ref_frames_V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME: v4l2_vp8_num_ref_frames = 2;
pub type v4l2_vp8_num_ref_frames = ::std::os::raw::c_uint;
pub const v4l2_vp8_golden_frame_sel_V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV:
    v4l2_vp8_golden_frame_sel = 0;
pub const v4l2_vp8_golden_frame_sel_V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD:
    v4l2_vp8_golden_frame_sel = 1;
pub type v4l2_vp8_golden_frame_sel = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_vp8_profile_V4L2_MPEG_VIDEO_VP8_PROFILE_0: v4l2_mpeg_video_vp8_profile =
    0;
pub const v4l2_mpeg_video_vp8_profile_V4L2_MPEG_VIDEO_VP8_PROFILE_1: v4l2_mpeg_video_vp8_profile =
    1;
pub const v4l2_mpeg_video_vp8_profile_V4L2_MPEG_VIDEO_VP8_PROFILE_2: v4l2_mpeg_video_vp8_profile =
    2;
pub const v4l2_mpeg_video_vp8_profile_V4L2_MPEG_VIDEO_VP8_PROFILE_3: v4l2_mpeg_video_vp8_profile =
    3;
pub type v4l2_mpeg_video_vp8_profile = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_vp9_profile_V4L2_MPEG_VIDEO_VP9_PROFILE_0: v4l2_mpeg_video_vp9_profile =
    0;
pub const v4l2_mpeg_video_vp9_profile_V4L2_MPEG_VIDEO_VP9_PROFILE_1: v4l2_mpeg_video_vp9_profile =
    1;
pub const v4l2_mpeg_video_vp9_profile_V4L2_MPEG_VIDEO_VP9_PROFILE_2: v4l2_mpeg_video_vp9_profile =
    2;
pub const v4l2_mpeg_video_vp9_profile_V4L2_MPEG_VIDEO_VP9_PROFILE_3: v4l2_mpeg_video_vp9_profile =
    3;
pub type v4l2_mpeg_video_vp9_profile = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_1_0: v4l2_mpeg_video_vp9_level = 0;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_1_1: v4l2_mpeg_video_vp9_level = 1;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_2_0: v4l2_mpeg_video_vp9_level = 2;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_2_1: v4l2_mpeg_video_vp9_level = 3;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_3_0: v4l2_mpeg_video_vp9_level = 4;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_3_1: v4l2_mpeg_video_vp9_level = 5;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_4_0: v4l2_mpeg_video_vp9_level = 6;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_4_1: v4l2_mpeg_video_vp9_level = 7;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_5_0: v4l2_mpeg_video_vp9_level = 8;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_5_1: v4l2_mpeg_video_vp9_level = 9;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_5_2: v4l2_mpeg_video_vp9_level = 10;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_6_0: v4l2_mpeg_video_vp9_level = 11;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_6_1: v4l2_mpeg_video_vp9_level = 12;
pub const v4l2_mpeg_video_vp9_level_V4L2_MPEG_VIDEO_VP9_LEVEL_6_2: v4l2_mpeg_video_vp9_level = 13;
pub type v4l2_mpeg_video_vp9_level = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_hevc_hier_coding_type_V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B:
    v4l2_mpeg_video_hevc_hier_coding_type = 0;
pub const v4l2_mpeg_video_hevc_hier_coding_type_V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P:
    v4l2_mpeg_video_hevc_hier_coding_type = 1;
pub type v4l2_mpeg_video_hevc_hier_coding_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_hevc_profile_V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN:
    v4l2_mpeg_video_hevc_profile = 0;
pub const v4l2_mpeg_video_hevc_profile_V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE:
    v4l2_mpeg_video_hevc_profile = 1;
pub const v4l2_mpeg_video_hevc_profile_V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10:
    v4l2_mpeg_video_hevc_profile = 2;
pub type v4l2_mpeg_video_hevc_profile = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_1: v4l2_mpeg_video_hevc_level = 0;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_2: v4l2_mpeg_video_hevc_level = 1;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1: v4l2_mpeg_video_hevc_level = 2;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_3: v4l2_mpeg_video_hevc_level = 3;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1: v4l2_mpeg_video_hevc_level = 4;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_4: v4l2_mpeg_video_hevc_level = 5;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1: v4l2_mpeg_video_hevc_level = 6;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_5: v4l2_mpeg_video_hevc_level = 7;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1: v4l2_mpeg_video_hevc_level = 8;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2: v4l2_mpeg_video_hevc_level = 9;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_6: v4l2_mpeg_video_hevc_level = 10;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1: v4l2_mpeg_video_hevc_level =
    11;
pub const v4l2_mpeg_video_hevc_level_V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2: v4l2_mpeg_video_hevc_level =
    12;
pub type v4l2_mpeg_video_hevc_level = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_hevc_tier_V4L2_MPEG_VIDEO_HEVC_TIER_MAIN: v4l2_mpeg_video_hevc_tier = 0;
pub const v4l2_mpeg_video_hevc_tier_V4L2_MPEG_VIDEO_HEVC_TIER_HIGH: v4l2_mpeg_video_hevc_tier = 1;
pub type v4l2_mpeg_video_hevc_tier = ::std::os::raw::c_uint;
pub const v4l2_cid_mpeg_video_hevc_loop_filter_mode_V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED : v4l2_cid_mpeg_video_hevc_loop_filter_mode = 0 ;
pub const v4l2_cid_mpeg_video_hevc_loop_filter_mode_V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED : v4l2_cid_mpeg_video_hevc_loop_filter_mode = 1 ;
pub const v4l2_cid_mpeg_video_hevc_loop_filter_mode_V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY : v4l2_cid_mpeg_video_hevc_loop_filter_mode = 2 ;
pub type v4l2_cid_mpeg_video_hevc_loop_filter_mode = ::std::os::raw::c_uint;
pub const v4l2_cid_mpeg_video_hevc_refresh_type_V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE:
    v4l2_cid_mpeg_video_hevc_refresh_type = 0;
pub const v4l2_cid_mpeg_video_hevc_refresh_type_V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA:
    v4l2_cid_mpeg_video_hevc_refresh_type = 1;
pub const v4l2_cid_mpeg_video_hevc_refresh_type_V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR:
    v4l2_cid_mpeg_video_hevc_refresh_type = 2;
pub type v4l2_cid_mpeg_video_hevc_refresh_type = ::std::os::raw::c_uint;
pub const v4l2_cid_mpeg_video_hevc_size_of_length_field_V4L2_MPEG_VIDEO_HEVC_SIZE_0:
    v4l2_cid_mpeg_video_hevc_size_of_length_field = 0;
pub const v4l2_cid_mpeg_video_hevc_size_of_length_field_V4L2_MPEG_VIDEO_HEVC_SIZE_1:
    v4l2_cid_mpeg_video_hevc_size_of_length_field = 1;
pub const v4l2_cid_mpeg_video_hevc_size_of_length_field_V4L2_MPEG_VIDEO_HEVC_SIZE_2:
    v4l2_cid_mpeg_video_hevc_size_of_length_field = 2;
pub const v4l2_cid_mpeg_video_hevc_size_of_length_field_V4L2_MPEG_VIDEO_HEVC_SIZE_4:
    v4l2_cid_mpeg_video_hevc_size_of_length_field = 3;
pub type v4l2_cid_mpeg_video_hevc_size_of_length_field = ::std::os::raw::c_uint;
pub const v4l2_mpeg_video_frame_skip_mode_V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_DISABLED:
    v4l2_mpeg_video_frame_skip_mode = 0;
pub const v4l2_mpeg_video_frame_skip_mode_V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT:
    v4l2_mpeg_video_frame_skip_mode = 1;
pub const v4l2_mpeg_video_frame_skip_mode_V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT:
    v4l2_mpeg_video_frame_skip_mode = 2;
pub type v4l2_mpeg_video_frame_skip_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_cx2341x_video_spatial_filter_mode_V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL : v4l2_mpeg_cx2341x_video_spatial_filter_mode = 0 ;
pub const v4l2_mpeg_cx2341x_video_spatial_filter_mode_V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO : v4l2_mpeg_cx2341x_video_spatial_filter_mode = 1 ;
pub type v4l2_mpeg_cx2341x_video_spatial_filter_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_cx2341x_video_luma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF : v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = 0 ;
pub const v4l2_mpeg_cx2341x_video_luma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR : v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = 1 ;
pub const v4l2_mpeg_cx2341x_video_luma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT : v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = 2 ;
pub const v4l2_mpeg_cx2341x_video_luma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE : v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = 3 ;
pub const v4l2_mpeg_cx2341x_video_luma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE : v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = 4 ;
pub type v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF : v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type = 0 ;
pub const v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type_V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR : v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type = 1 ;
pub type v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_cx2341x_video_temporal_filter_mode_V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL : v4l2_mpeg_cx2341x_video_temporal_filter_mode = 0 ;
pub const v4l2_mpeg_cx2341x_video_temporal_filter_mode_V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO : v4l2_mpeg_cx2341x_video_temporal_filter_mode = 1 ;
pub type v4l2_mpeg_cx2341x_video_temporal_filter_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_cx2341x_video_median_filter_type_V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF : v4l2_mpeg_cx2341x_video_median_filter_type = 0 ;
pub const v4l2_mpeg_cx2341x_video_median_filter_type_V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR : v4l2_mpeg_cx2341x_video_median_filter_type = 1 ;
pub const v4l2_mpeg_cx2341x_video_median_filter_type_V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT : v4l2_mpeg_cx2341x_video_median_filter_type = 2 ;
pub const v4l2_mpeg_cx2341x_video_median_filter_type_V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT : v4l2_mpeg_cx2341x_video_median_filter_type = 3 ;
pub const v4l2_mpeg_cx2341x_video_median_filter_type_V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG : v4l2_mpeg_cx2341x_video_median_filter_type = 4 ;
pub type v4l2_mpeg_cx2341x_video_median_filter_type = ::std::os::raw::c_uint;
pub const v4l2_mpeg_mfc51_video_frame_skip_mode_V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED:
    v4l2_mpeg_mfc51_video_frame_skip_mode = 0;
pub const v4l2_mpeg_mfc51_video_frame_skip_mode_V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT : v4l2_mpeg_mfc51_video_frame_skip_mode = 1 ;
pub const v4l2_mpeg_mfc51_video_frame_skip_mode_V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT:
    v4l2_mpeg_mfc51_video_frame_skip_mode = 2;
pub type v4l2_mpeg_mfc51_video_frame_skip_mode = ::std::os::raw::c_uint;
pub const v4l2_mpeg_mfc51_video_force_frame_type_V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED:
    v4l2_mpeg_mfc51_video_force_frame_type = 0;
pub const v4l2_mpeg_mfc51_video_force_frame_type_V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME:
    v4l2_mpeg_mfc51_video_force_frame_type = 1;
pub const v4l2_mpeg_mfc51_video_force_frame_type_V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED : v4l2_mpeg_mfc51_video_force_frame_type = 2 ;
pub type v4l2_mpeg_mfc51_video_force_frame_type = ::std::os::raw::c_uint;
pub const v4l2_exposure_auto_type_V4L2_EXPOSURE_AUTO: v4l2_exposure_auto_type = 0;
pub const v4l2_exposure_auto_type_V4L2_EXPOSURE_MANUAL: v4l2_exposure_auto_type = 1;
pub const v4l2_exposure_auto_type_V4L2_EXPOSURE_SHUTTER_PRIORITY: v4l2_exposure_auto_type = 2;
pub const v4l2_exposure_auto_type_V4L2_EXPOSURE_APERTURE_PRIORITY: v4l2_exposure_auto_type = 3;
pub type v4l2_exposure_auto_type = ::std::os::raw::c_uint;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_MANUAL:
    v4l2_auto_n_preset_white_balance = 0;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_AUTO:
    v4l2_auto_n_preset_white_balance = 1;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_INCANDESCENT:
    v4l2_auto_n_preset_white_balance = 2;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_FLUORESCENT:
    v4l2_auto_n_preset_white_balance = 3;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_FLUORESCENT_H:
    v4l2_auto_n_preset_white_balance = 4;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_HORIZON:
    v4l2_auto_n_preset_white_balance = 5;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_DAYLIGHT:
    v4l2_auto_n_preset_white_balance = 6;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_FLASH:
    v4l2_auto_n_preset_white_balance = 7;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_CLOUDY:
    v4l2_auto_n_preset_white_balance = 8;
pub const v4l2_auto_n_preset_white_balance_V4L2_WHITE_BALANCE_SHADE:
    v4l2_auto_n_preset_white_balance = 9;
pub type v4l2_auto_n_preset_white_balance = ::std::os::raw::c_uint;
pub const v4l2_iso_sensitivity_auto_type_V4L2_ISO_SENSITIVITY_MANUAL:
    v4l2_iso_sensitivity_auto_type = 0;
pub const v4l2_iso_sensitivity_auto_type_V4L2_ISO_SENSITIVITY_AUTO: v4l2_iso_sensitivity_auto_type =
    1;
pub type v4l2_iso_sensitivity_auto_type = ::std::os::raw::c_uint;
pub const v4l2_exposure_metering_V4L2_EXPOSURE_METERING_AVERAGE: v4l2_exposure_metering = 0;
pub const v4l2_exposure_metering_V4L2_EXPOSURE_METERING_CENTER_WEIGHTED: v4l2_exposure_metering = 1;
pub const v4l2_exposure_metering_V4L2_EXPOSURE_METERING_SPOT: v4l2_exposure_metering = 2;
pub const v4l2_exposure_metering_V4L2_EXPOSURE_METERING_MATRIX: v4l2_exposure_metering = 3;
pub type v4l2_exposure_metering = ::std::os::raw::c_uint;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_NONE: v4l2_scene_mode = 0;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_BACKLIGHT: v4l2_scene_mode = 1;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_BEACH_SNOW: v4l2_scene_mode = 2;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_CANDLE_LIGHT: v4l2_scene_mode = 3;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_DAWN_DUSK: v4l2_scene_mode = 4;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_FALL_COLORS: v4l2_scene_mode = 5;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_FIREWORKS: v4l2_scene_mode = 6;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_LANDSCAPE: v4l2_scene_mode = 7;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_NIGHT: v4l2_scene_mode = 8;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_PARTY_INDOOR: v4l2_scene_mode = 9;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_PORTRAIT: v4l2_scene_mode = 10;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_SPORTS: v4l2_scene_mode = 11;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_SUNSET: v4l2_scene_mode = 12;
pub const v4l2_scene_mode_V4L2_SCENE_MODE_TEXT: v4l2_scene_mode = 13;
pub type v4l2_scene_mode = ::std::os::raw::c_uint;
pub const v4l2_auto_focus_range_V4L2_AUTO_FOCUS_RANGE_AUTO: v4l2_auto_focus_range = 0;
pub const v4l2_auto_focus_range_V4L2_AUTO_FOCUS_RANGE_NORMAL: v4l2_auto_focus_range = 1;
pub const v4l2_auto_focus_range_V4L2_AUTO_FOCUS_RANGE_MACRO: v4l2_auto_focus_range = 2;
pub const v4l2_auto_focus_range_V4L2_AUTO_FOCUS_RANGE_INFINITY: v4l2_auto_focus_range = 3;
pub type v4l2_auto_focus_range = ::std::os::raw::c_uint;
pub const v4l2_preemphasis_V4L2_PREEMPHASIS_DISABLED: v4l2_preemphasis = 0;
pub const v4l2_preemphasis_V4L2_PREEMPHASIS_50_uS: v4l2_preemphasis = 1;
pub const v4l2_preemphasis_V4L2_PREEMPHASIS_75_uS: v4l2_preemphasis = 2;
pub type v4l2_preemphasis = ::std::os::raw::c_uint;
pub const v4l2_flash_led_mode_V4L2_FLASH_LED_MODE_NONE: v4l2_flash_led_mode = 0;
pub const v4l2_flash_led_mode_V4L2_FLASH_LED_MODE_FLASH: v4l2_flash_led_mode = 1;
pub const v4l2_flash_led_mode_V4L2_FLASH_LED_MODE_TORCH: v4l2_flash_led_mode = 2;
pub type v4l2_flash_led_mode = ::std::os::raw::c_uint;
pub const v4l2_flash_strobe_source_V4L2_FLASH_STROBE_SOURCE_SOFTWARE: v4l2_flash_strobe_source = 0;
pub const v4l2_flash_strobe_source_V4L2_FLASH_STROBE_SOURCE_EXTERNAL: v4l2_flash_strobe_source = 1;
pub type v4l2_flash_strobe_source = ::std::os::raw::c_uint;
pub const v4l2_jpeg_chroma_subsampling_V4L2_JPEG_CHROMA_SUBSAMPLING_444:
    v4l2_jpeg_chroma_subsampling = 0;
pub const v4l2_jpeg_chroma_subsampling_V4L2_JPEG_CHROMA_SUBSAMPLING_422:
    v4l2_jpeg_chroma_subsampling = 1;
pub const v4l2_jpeg_chroma_subsampling_V4L2_JPEG_CHROMA_SUBSAMPLING_420:
    v4l2_jpeg_chroma_subsampling = 2;
pub const v4l2_jpeg_chroma_subsampling_V4L2_JPEG_CHROMA_SUBSAMPLING_411:
    v4l2_jpeg_chroma_subsampling = 3;
pub const v4l2_jpeg_chroma_subsampling_V4L2_JPEG_CHROMA_SUBSAMPLING_410:
    v4l2_jpeg_chroma_subsampling = 4;
pub const v4l2_jpeg_chroma_subsampling_V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY:
    v4l2_jpeg_chroma_subsampling = 5;
pub type v4l2_jpeg_chroma_subsampling = ::std::os::raw::c_uint;
pub const v4l2_dv_tx_mode_V4L2_DV_TX_MODE_DVI_D: v4l2_dv_tx_mode = 0;
pub const v4l2_dv_tx_mode_V4L2_DV_TX_MODE_HDMI: v4l2_dv_tx_mode = 1;
pub type v4l2_dv_tx_mode = ::std::os::raw::c_uint;
pub const v4l2_dv_rgb_range_V4L2_DV_RGB_RANGE_AUTO: v4l2_dv_rgb_range = 0;
pub const v4l2_dv_rgb_range_V4L2_DV_RGB_RANGE_LIMITED: v4l2_dv_rgb_range = 1;
pub const v4l2_dv_rgb_range_V4L2_DV_RGB_RANGE_FULL: v4l2_dv_rgb_range = 2;
pub type v4l2_dv_rgb_range = ::std::os::raw::c_uint;
pub const v4l2_dv_it_content_type_V4L2_DV_IT_CONTENT_TYPE_GRAPHICS: v4l2_dv_it_content_type = 0;
pub const v4l2_dv_it_content_type_V4L2_DV_IT_CONTENT_TYPE_PHOTO: v4l2_dv_it_content_type = 1;
pub const v4l2_dv_it_content_type_V4L2_DV_IT_CONTENT_TYPE_CINEMA: v4l2_dv_it_content_type = 2;
pub const v4l2_dv_it_content_type_V4L2_DV_IT_CONTENT_TYPE_GAME: v4l2_dv_it_content_type = 3;
pub const v4l2_dv_it_content_type_V4L2_DV_IT_CONTENT_TYPE_NO_ITC: v4l2_dv_it_content_type = 4;
pub type v4l2_dv_it_content_type = ::std::os::raw::c_uint;
pub const v4l2_deemphasis_V4L2_DEEMPHASIS_DISABLED: v4l2_deemphasis = 0;
pub const v4l2_deemphasis_V4L2_DEEMPHASIS_50_uS: v4l2_deemphasis = 1;
pub const v4l2_deemphasis_V4L2_DEEMPHASIS_75_uS: v4l2_deemphasis = 2;
pub type v4l2_deemphasis = ::std::os::raw::c_uint;
pub const v4l2_detect_md_mode_V4L2_DETECT_MD_MODE_DISABLED: v4l2_detect_md_mode = 0;
pub const v4l2_detect_md_mode_V4L2_DETECT_MD_MODE_GLOBAL: v4l2_detect_md_mode = 1;
pub const v4l2_detect_md_mode_V4L2_DETECT_MD_MODE_THRESHOLD_GRID: v4l2_detect_md_mode = 2;
pub const v4l2_detect_md_mode_V4L2_DETECT_MD_MODE_REGION_GRID: v4l2_detect_md_mode = 3;
pub type v4l2_detect_md_mode = ::std::os::raw::c_uint;
pub const v4l2_stateless_h264_decode_mode_V4L2_STATELESS_H264_DECODE_MODE_SLICE_BASED:
    v4l2_stateless_h264_decode_mode = 0;
pub const v4l2_stateless_h264_decode_mode_V4L2_STATELESS_H264_DECODE_MODE_FRAME_BASED:
    v4l2_stateless_h264_decode_mode = 1;
pub type v4l2_stateless_h264_decode_mode = ::std::os::raw::c_uint;
pub const v4l2_stateless_h264_start_code_V4L2_STATELESS_H264_START_CODE_NONE:
    v4l2_stateless_h264_start_code = 0;
pub const v4l2_stateless_h264_start_code_V4L2_STATELESS_H264_START_CODE_ANNEX_B:
    v4l2_stateless_h264_start_code = 1;
pub type v4l2_stateless_h264_start_code = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_sps {
    pub profile_idc: __u8,
    pub constraint_set_flags: __u8,
    pub level_idc: __u8,
    pub seq_parameter_set_id: __u8,
    pub chroma_format_idc: __u8,
    pub bit_depth_luma_minus8: __u8,
    pub bit_depth_chroma_minus8: __u8,
    pub log2_max_frame_num_minus4: __u8,
    pub pic_order_cnt_type: __u8,
    pub log2_max_pic_order_cnt_lsb_minus4: __u8,
    pub max_num_ref_frames: __u8,
    pub num_ref_frames_in_pic_order_cnt_cycle: __u8,
    pub offset_for_ref_frame: [__s32; 255usize],
    pub offset_for_non_ref_pic: __s32,
    pub offset_for_top_to_bottom_field: __s32,
    pub pic_width_in_mbs_minus1: __u16,
    pub pic_height_in_map_units_minus1: __u16,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_pps {
    pub pic_parameter_set_id: __u8,
    pub seq_parameter_set_id: __u8,
    pub num_slice_groups_minus1: __u8,
    pub num_ref_idx_l0_default_active_minus1: __u8,
    pub num_ref_idx_l1_default_active_minus1: __u8,
    pub weighted_bipred_idc: __u8,
    pub pic_init_qp_minus26: __s8,
    pub pic_init_qs_minus26: __s8,
    pub chroma_qp_index_offset: __s8,
    pub second_chroma_qp_index_offset: __s8,
    pub flags: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_scaling_matrix {
    pub scaling_list_4x4: [[__u8; 16usize]; 6usize],
    pub scaling_list_8x8: [[__u8; 64usize]; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_h264_weight_factors {
    pub luma_weight: [__s16; 32usize],
    pub luma_offset: [__s16; 32usize],
    pub chroma_weight: [[__s16; 2usize]; 32usize],
    pub chroma_offset: [[__s16; 2usize]; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_pred_weights {
    pub luma_log2_weight_denom: __u16,
    pub chroma_log2_weight_denom: __u16,
    pub weight_factors: [v4l2_h264_weight_factors; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_h264_reference {
    pub fields: __u8,
    pub index: __u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_slice_params {
    pub header_bit_size: __u32,
    pub first_mb_in_slice: __u32,
    pub slice_type: __u8,
    pub colour_plane_id: __u8,
    pub redundant_pic_cnt: __u8,
    pub cabac_init_idc: __u8,
    pub slice_qp_delta: __s8,
    pub slice_qs_delta: __s8,
    pub disable_deblocking_filter_idc: __u8,
    pub slice_alpha_c0_offset_div2: __s8,
    pub slice_beta_offset_div2: __s8,
    pub num_ref_idx_l0_active_minus1: __u8,
    pub num_ref_idx_l1_active_minus1: __u8,
    pub reserved: __u8,
    pub ref_pic_list0: [v4l2_h264_reference; 32usize],
    pub ref_pic_list1: [v4l2_h264_reference; 32usize],
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_h264_dpb_entry {
    pub reference_ts: __u64,
    pub pic_num: __u32,
    pub frame_num: __u16,
    pub fields: __u8,
    pub reserved: [__u8; 5usize],
    pub top_field_order_cnt: __s32,
    pub bottom_field_order_cnt: __s32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_h264_decode_params {
    pub dpb: [v4l2_h264_dpb_entry; 16usize],
    pub nal_ref_idc: __u16,
    pub frame_num: __u16,
    pub top_field_order_cnt: __s32,
    pub bottom_field_order_cnt: __s32,
    pub idr_pic_id: __u16,
    pub pic_order_cnt_lsb: __u16,
    pub delta_pic_order_cnt_bottom: __s32,
    pub delta_pic_order_cnt0: __s32,
    pub delta_pic_order_cnt1: __s32,
    pub dec_ref_pic_marking_bit_size: __u32,
    pub pic_order_cnt_bit_size: __u32,
    pub slice_group_change_cycle: __u32,
    pub reserved: __u32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_fwht_params {
    pub backward_ref_ts: __u64,
    pub version: __u32,
    pub width: __u32,
    pub height: __u32,
    pub flags: __u32,
    pub colorspace: __u32,
    pub xfer_func: __u32,
    pub ycbcr_enc: __u32,
    pub quantization: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_segment {
    pub quant_update: [__s8; 4usize],
    pub lf_update: [__s8; 4usize],
    pub segment_probs: [__u8; 3usize],
    pub padding: __u8,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_loop_filter {
    pub ref_frm_delta: [__s8; 4usize],
    pub mb_mode_delta: [__s8; 4usize],
    pub sharpness_level: __u8,
    pub level: __u8,
    pub padding: __u16,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_quantization {
    pub y_ac_qi: __u8,
    pub y_dc_delta: __s8,
    pub y2_dc_delta: __s8,
    pub y2_ac_delta: __s8,
    pub uv_dc_delta: __s8,
    pub uv_ac_delta: __s8,
    pub padding: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_entropy {
    pub coeff_probs: [[[[__u8; 11usize]; 3usize]; 8usize]; 4usize],
    pub y_mode_probs: [__u8; 4usize],
    pub uv_mode_probs: [__u8; 3usize],
    pub mv_probs: [[__u8; 19usize]; 2usize],
    pub padding: [__u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vp8_entropy_coder_state {
    pub range: __u8,
    pub value: __u8,
    pub bit_count: __u8,
    pub padding: __u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_vp8_frame {
    pub segment: v4l2_vp8_segment,
    pub lf: v4l2_vp8_loop_filter,
    pub quant: v4l2_vp8_quantization,
    pub entropy: v4l2_vp8_entropy,
    pub coder_state: v4l2_vp8_entropy_coder_state,
    pub width: __u16,
    pub height: __u16,
    pub horizontal_scale: __u8,
    pub vertical_scale: __u8,
    pub version: __u8,
    pub prob_skip_false: __u8,
    pub prob_intra: __u8,
    pub prob_last: __u8,
    pub prob_gf: __u8,
    pub num_dct_parts: __u8,
    pub first_part_size: __u32,
    pub first_part_header_bits: __u32,
    pub dct_part_sizes: [__u32; 8usize],
    pub last_frame_ts: __u64,
    pub golden_frame_ts: __u64,
    pub alt_frame_ts: __u64,
    pub flags: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_mpeg2_sequence {
    pub horizontal_size: __u16,
    pub vertical_size: __u16,
    pub vbv_buffer_size: __u32,
    pub profile_and_level_indication: __u16,
    pub chroma_format: __u8,
    pub flags: __u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_mpeg2_picture {
    pub backward_ref_ts: __u64,
    pub forward_ref_ts: __u64,
    pub flags: __u32,
    pub f_code: [[__u8; 2usize]; 2usize],
    pub picture_coding_type: __u8,
    pub picture_structure: __u8,
    pub intra_dc_precision: __u8,
    pub reserved: [__u8; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_mpeg2_quantisation {
    pub intra_quantiser_matrix: [__u8; 64usize],
    pub non_intra_quantiser_matrix: [__u8; 64usize],
    pub chroma_intra_quantiser_matrix: [__u8; 64usize],
    pub chroma_non_intra_quantiser_matrix: [__u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_hdr10_cll_info {
    pub max_content_light_level: __u16,
    pub max_pic_average_light_level: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_ctrl_hdr10_mastering_display {
    pub display_primaries_x: [__u16; 3usize],
    pub display_primaries_y: [__u16; 3usize],
    pub white_point_x: __u16,
    pub white_point_y: __u16,
    pub max_display_mastering_luminance: __u32,
    pub min_display_mastering_luminance: __u32,
}
pub const v4l2_field_V4L2_FIELD_ANY: v4l2_field = 0;
pub const v4l2_field_V4L2_FIELD_NONE: v4l2_field = 1;
pub const v4l2_field_V4L2_FIELD_TOP: v4l2_field = 2;
pub const v4l2_field_V4L2_FIELD_BOTTOM: v4l2_field = 3;
pub const v4l2_field_V4L2_FIELD_INTERLACED: v4l2_field = 4;
pub const v4l2_field_V4L2_FIELD_SEQ_TB: v4l2_field = 5;
pub const v4l2_field_V4L2_FIELD_SEQ_BT: v4l2_field = 6;
pub const v4l2_field_V4L2_FIELD_ALTERNATE: v4l2_field = 7;
pub const v4l2_field_V4L2_FIELD_INTERLACED_TB: v4l2_field = 8;
pub const v4l2_field_V4L2_FIELD_INTERLACED_BT: v4l2_field = 9;
pub type v4l2_field = ::std::os::raw::c_uint;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_CAPTURE: v4l2_buf_type = 1;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OUTPUT: v4l2_buf_type = 2;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OVERLAY: v4l2_buf_type = 3;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VBI_CAPTURE: v4l2_buf_type = 4;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VBI_OUTPUT: v4l2_buf_type = 5;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SLICED_VBI_CAPTURE: v4l2_buf_type = 6;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SLICED_VBI_OUTPUT: v4l2_buf_type = 7;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY: v4l2_buf_type = 8;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE: v4l2_buf_type = 9;
pub const v4l2_buf_type_V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE: v4l2_buf_type = 10;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SDR_CAPTURE: v4l2_buf_type = 11;
pub const v4l2_buf_type_V4L2_BUF_TYPE_SDR_OUTPUT: v4l2_buf_type = 12;
pub const v4l2_buf_type_V4L2_BUF_TYPE_META_CAPTURE: v4l2_buf_type = 13;
pub const v4l2_buf_type_V4L2_BUF_TYPE_META_OUTPUT: v4l2_buf_type = 14;
pub const v4l2_buf_type_V4L2_BUF_TYPE_PRIVATE: v4l2_buf_type = 128;
pub type v4l2_buf_type = ::std::os::raw::c_uint;
pub const v4l2_tuner_type_V4L2_TUNER_RADIO: v4l2_tuner_type = 1;
pub const v4l2_tuner_type_V4L2_TUNER_ANALOG_TV: v4l2_tuner_type = 2;
pub const v4l2_tuner_type_V4L2_TUNER_DIGITAL_TV: v4l2_tuner_type = 3;
pub const v4l2_tuner_type_V4L2_TUNER_SDR: v4l2_tuner_type = 4;
pub const v4l2_tuner_type_V4L2_TUNER_RF: v4l2_tuner_type = 5;
pub type v4l2_tuner_type = ::std::os::raw::c_uint;
pub const v4l2_memory_V4L2_MEMORY_MMAP: v4l2_memory = 1;
pub const v4l2_memory_V4L2_MEMORY_USERPTR: v4l2_memory = 2;
pub const v4l2_memory_V4L2_MEMORY_OVERLAY: v4l2_memory = 3;
pub const v4l2_memory_V4L2_MEMORY_DMABUF: v4l2_memory = 4;
pub type v4l2_memory = ::std::os::raw::c_uint;
pub const v4l2_colorspace_V4L2_COLORSPACE_DEFAULT: v4l2_colorspace = 0;
pub const v4l2_colorspace_V4L2_COLORSPACE_SMPTE170M: v4l2_colorspace = 1;
pub const v4l2_colorspace_V4L2_COLORSPACE_SMPTE240M: v4l2_colorspace = 2;
pub const v4l2_colorspace_V4L2_COLORSPACE_REC709: v4l2_colorspace = 3;
pub const v4l2_colorspace_V4L2_COLORSPACE_BT878: v4l2_colorspace = 4;
pub const v4l2_colorspace_V4L2_COLORSPACE_470_SYSTEM_M: v4l2_colorspace = 5;
pub const v4l2_colorspace_V4L2_COLORSPACE_470_SYSTEM_BG: v4l2_colorspace = 6;
pub const v4l2_colorspace_V4L2_COLORSPACE_JPEG: v4l2_colorspace = 7;
pub const v4l2_colorspace_V4L2_COLORSPACE_SRGB: v4l2_colorspace = 8;
pub const v4l2_colorspace_V4L2_COLORSPACE_OPRGB: v4l2_colorspace = 9;
pub const v4l2_colorspace_V4L2_COLORSPACE_BT2020: v4l2_colorspace = 10;
pub const v4l2_colorspace_V4L2_COLORSPACE_RAW: v4l2_colorspace = 11;
pub const v4l2_colorspace_V4L2_COLORSPACE_DCI_P3: v4l2_colorspace = 12;
pub type v4l2_colorspace = ::std::os::raw::c_uint;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_DEFAULT: v4l2_xfer_func = 0;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_709: v4l2_xfer_func = 1;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_SRGB: v4l2_xfer_func = 2;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_OPRGB: v4l2_xfer_func = 3;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_SMPTE240M: v4l2_xfer_func = 4;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_NONE: v4l2_xfer_func = 5;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_DCI_P3: v4l2_xfer_func = 6;
pub const v4l2_xfer_func_V4L2_XFER_FUNC_SMPTE2084: v4l2_xfer_func = 7;
pub type v4l2_xfer_func = ::std::os::raw::c_uint;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_DEFAULT: v4l2_ycbcr_encoding = 0;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_601: v4l2_ycbcr_encoding = 1;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_709: v4l2_ycbcr_encoding = 2;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_XV601: v4l2_ycbcr_encoding = 3;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_XV709: v4l2_ycbcr_encoding = 4;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_SYCC: v4l2_ycbcr_encoding = 5;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_BT2020: v4l2_ycbcr_encoding = 6;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_BT2020_CONST_LUM: v4l2_ycbcr_encoding = 7;
pub const v4l2_ycbcr_encoding_V4L2_YCBCR_ENC_SMPTE240M: v4l2_ycbcr_encoding = 8;
pub type v4l2_ycbcr_encoding = ::std::os::raw::c_uint;
pub const v4l2_hsv_encoding_V4L2_HSV_ENC_180: v4l2_hsv_encoding = 128;
pub const v4l2_hsv_encoding_V4L2_HSV_ENC_256: v4l2_hsv_encoding = 129;
pub type v4l2_hsv_encoding = ::std::os::raw::c_uint;
pub const v4l2_quantization_V4L2_QUANTIZATION_DEFAULT: v4l2_quantization = 0;
pub const v4l2_quantization_V4L2_QUANTIZATION_FULL_RANGE: v4l2_quantization = 1;
pub const v4l2_quantization_V4L2_QUANTIZATION_LIM_RANGE: v4l2_quantization = 2;
pub type v4l2_quantization = ::std::os::raw::c_uint;
pub const v4l2_priority_V4L2_PRIORITY_UNSET: v4l2_priority = 0;
pub const v4l2_priority_V4L2_PRIORITY_BACKGROUND: v4l2_priority = 1;
pub const v4l2_priority_V4L2_PRIORITY_INTERACTIVE: v4l2_priority = 2;
pub const v4l2_priority_V4L2_PRIORITY_RECORD: v4l2_priority = 3;
pub const v4l2_priority_V4L2_PRIORITY_DEFAULT: v4l2_priority = 2;
pub type v4l2_priority = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_rect {
    pub left: __s32,
    pub top: __s32,
    pub width: __u32,
    pub height: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_fract {
    pub numerator: __u32,
    pub denominator: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_area {
    pub width: __u32,
    pub height: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_capability {
    pub driver: [__u8; 16usize],
    pub card: [__u8; 32usize],
    pub bus_info: [__u8; 32usize],
    pub version: __u32,
    pub capabilities: __u32,
    pub device_caps: __u32,
    pub reserved: [__u32; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_pix_format {
    pub width: __u32,
    pub height: __u32,
    pub pixelformat: __u32,
    pub field: __u32,
    pub bytesperline: __u32,
    pub sizeimage: __u32,
    pub colorspace: __u32,
    pub priv_: __u32,
    pub flags: __u32,
    pub __bindgen_anon_1: v4l2_pix_format__bindgen_ty_1,
    pub quantization: __u32,
    pub xfer_func: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_pix_format__bindgen_ty_1 {
    pub ycbcr_enc: __u32,
    pub hsv_enc: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_fmtdesc {
    pub index: __u32,
    pub type_: __u32,
    pub flags: __u32,
    pub description: [__u8; 32usize],
    pub pixelformat: __u32,
    pub mbus_code: __u32,
    pub reserved: [__u32; 3usize],
}
pub const v4l2_frmsizetypes_V4L2_FRMSIZE_TYPE_DISCRETE: v4l2_frmsizetypes = 1;
pub const v4l2_frmsizetypes_V4L2_FRMSIZE_TYPE_CONTINUOUS: v4l2_frmsizetypes = 2;
pub const v4l2_frmsizetypes_V4L2_FRMSIZE_TYPE_STEPWISE: v4l2_frmsizetypes = 3;
pub type v4l2_frmsizetypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frmsize_discrete {
    pub width: __u32,
    pub height: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frmsize_stepwise {
    pub min_width: __u32,
    pub max_width: __u32,
    pub step_width: __u32,
    pub min_height: __u32,
    pub max_height: __u32,
    pub step_height: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_frmsizeenum {
    pub index: __u32,
    pub pixel_format: __u32,
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_frmsizeenum__bindgen_ty_1,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_frmsizeenum__bindgen_ty_1 {
    pub discrete: v4l2_frmsize_discrete,
    pub stepwise: v4l2_frmsize_stepwise,
}
pub const v4l2_frmivaltypes_V4L2_FRMIVAL_TYPE_DISCRETE: v4l2_frmivaltypes = 1;
pub const v4l2_frmivaltypes_V4L2_FRMIVAL_TYPE_CONTINUOUS: v4l2_frmivaltypes = 2;
pub const v4l2_frmivaltypes_V4L2_FRMIVAL_TYPE_STEPWISE: v4l2_frmivaltypes = 3;
pub type v4l2_frmivaltypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frmival_stepwise {
    pub min: v4l2_fract,
    pub max: v4l2_fract,
    pub step: v4l2_fract,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_frmivalenum {
    pub index: __u32,
    pub pixel_format: __u32,
    pub width: __u32,
    pub height: __u32,
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_frmivalenum__bindgen_ty_1,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_frmivalenum__bindgen_ty_1 {
    pub discrete: v4l2_fract,
    pub stepwise: v4l2_frmival_stepwise,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_timecode {
    pub type_: __u32,
    pub flags: __u32,
    pub frames: __u8,
    pub seconds: __u8,
    pub minutes: __u8,
    pub hours: __u8,
    pub userbits: [__u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_jpegcompression {
    pub quality: ::std::os::raw::c_int,
    pub APPn: ::std::os::raw::c_int,
    pub APP_len: ::std::os::raw::c_int,
    pub APP_data: [::std::os::raw::c_char; 60usize],
    pub COM_len: ::std::os::raw::c_int,
    pub COM_data: [::std::os::raw::c_char; 60usize],
    pub jpeg_markers: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_requestbuffers {
    pub count: __u32,
    pub type_: __u32,
    pub memory: __u32,
    pub capabilities: __u32,
    pub reserved: [__u32; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_plane {
    pub bytesused: __u32,
    pub length: __u32,
    pub m: v4l2_plane__bindgen_ty_1,
    pub data_offset: __u32,
    pub reserved: [__u32; 11usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_plane__bindgen_ty_1 {
    pub mem_offset: __u32,
    pub userptr: ::std::os::raw::c_ulong,
    pub fd: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_buffer {
    pub index: __u32,
    pub type_: __u32,
    pub bytesused: __u32,
    pub flags: __u32,
    pub field: __u32,
    pub timestamp: timeval,
    pub timecode: v4l2_timecode,
    pub sequence: __u32,
    pub memory: __u32,
    pub m: v4l2_buffer__bindgen_ty_1,
    pub length: __u32,
    pub reserved2: __u32,
    pub __bindgen_anon_1: v4l2_buffer__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_buffer__bindgen_ty_1 {
    pub offset: __u32,
    pub userptr: ::std::os::raw::c_ulong,
    pub planes: *mut v4l2_plane,
    pub fd: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_buffer__bindgen_ty_2 {
    pub request_fd: __s32,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_exportbuffer {
    pub type_: __u32,
    pub index: __u32,
    pub plane: __u32,
    pub flags: __u32,
    pub fd: __s32,
    pub reserved: [__u32; 11usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_framebuffer {
    pub capability: __u32,
    pub flags: __u32,
    pub base: *mut ::std::os::raw::c_void,
    pub fmt: v4l2_framebuffer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_framebuffer__bindgen_ty_1 {
    pub width: __u32,
    pub height: __u32,
    pub pixelformat: __u32,
    pub field: __u32,
    pub bytesperline: __u32,
    pub sizeimage: __u32,
    pub colorspace: __u32,
    pub priv_: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_clip {
    pub c: v4l2_rect,
    pub next: *mut v4l2_clip,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_window {
    pub w: v4l2_rect,
    pub field: __u32,
    pub chromakey: __u32,
    pub clips: *mut v4l2_clip,
    pub clipcount: __u32,
    pub bitmap: *mut ::std::os::raw::c_void,
    pub global_alpha: __u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_captureparm {
    pub capability: __u32,
    pub capturemode: __u32,
    pub timeperframe: v4l2_fract,
    pub extendedmode: __u32,
    pub readbuffers: __u32,
    pub reserved: [__u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_outputparm {
    pub capability: __u32,
    pub outputmode: __u32,
    pub timeperframe: v4l2_fract,
    pub extendedmode: __u32,
    pub writebuffers: __u32,
    pub reserved: [__u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_cropcap {
    pub type_: __u32,
    pub bounds: v4l2_rect,
    pub defrect: v4l2_rect,
    pub pixelaspect: v4l2_fract,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_crop {
    pub type_: __u32,
    pub c: v4l2_rect,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_selection {
    pub type_: __u32,
    pub target: __u32,
    pub flags: __u32,
    pub r: v4l2_rect,
    pub reserved: [__u32; 9usize],
}
pub type v4l2_std_id = __u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_standard {
    pub index: __u32,
    pub id: v4l2_std_id,
    pub name: [__u8; 24usize],
    pub frameperiod: v4l2_fract,
    pub framelines: __u32,
    pub reserved: [__u32; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_bt_timings {
    pub width: __u32,
    pub height: __u32,
    pub interlaced: __u32,
    pub polarities: __u32,
    pub pixelclock: __u64,
    pub hfrontporch: __u32,
    pub hsync: __u32,
    pub hbackporch: __u32,
    pub vfrontporch: __u32,
    pub vsync: __u32,
    pub vbackporch: __u32,
    pub il_vfrontporch: __u32,
    pub il_vsync: __u32,
    pub il_vbackporch: __u32,
    pub standards: __u32,
    pub flags: __u32,
    pub picture_aspect: v4l2_fract,
    pub cea861_vic: __u8,
    pub hdmi_vic: __u8,
    pub reserved: [__u8; 46usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dv_timings {
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_dv_timings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_dv_timings__bindgen_ty_1 {
    pub bt: v4l2_bt_timings,
    pub reserved: [__u32; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_enum_dv_timings {
    pub index: __u32,
    pub pad: __u32,
    pub reserved: [__u32; 2usize],
    pub timings: v4l2_dv_timings,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_bt_timings_cap {
    pub min_width: __u32,
    pub max_width: __u32,
    pub min_height: __u32,
    pub max_height: __u32,
    pub min_pixelclock: __u64,
    pub max_pixelclock: __u64,
    pub standards: __u32,
    pub capabilities: __u32,
    pub reserved: [__u32; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_dv_timings_cap {
    pub type_: __u32,
    pub pad: __u32,
    pub reserved: [__u32; 2usize],
    pub __bindgen_anon_1: v4l2_dv_timings_cap__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_dv_timings_cap__bindgen_ty_1 {
    pub bt: v4l2_bt_timings_cap,
    pub raw_data: [__u32; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_input {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub type_: __u32,
    pub audioset: __u32,
    pub tuner: __u32,
    pub std: v4l2_std_id,
    pub status: __u32,
    pub capabilities: __u32,
    pub reserved: [__u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_output {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub type_: __u32,
    pub audioset: __u32,
    pub modulator: __u32,
    pub std: v4l2_std_id,
    pub capabilities: __u32,
    pub reserved: [__u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_control {
    pub id: __u32,
    pub value: __s32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_ext_control {
    pub id: __u32,
    pub size: __u32,
    pub reserved2: [__u32; 1usize],
    pub __bindgen_anon_1: v4l2_ext_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_ext_control__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
    pub string: *mut ::std::os::raw::c_char,
    pub p_u8: *mut __u8,
    pub p_u16: *mut __u16,
    pub p_u32: *mut __u32,
    pub p_area: *mut v4l2_area,
    pub p_h264_sps: *mut v4l2_ctrl_h264_sps,
    pub p_h264_pps: *mut v4l2_ctrl_h264_pps,
    pub p_h264_scaling_matrix: *mut v4l2_ctrl_h264_scaling_matrix,
    pub p_h264_pred_weights: *mut v4l2_ctrl_h264_pred_weights,
    pub p_h264_slice_params: *mut v4l2_ctrl_h264_slice_params,
    pub p_h264_decode_params: *mut v4l2_ctrl_h264_decode_params,
    pub p_fwht_params: *mut v4l2_ctrl_fwht_params,
    pub p_vp8_frame: *mut v4l2_ctrl_vp8_frame,
    pub p_mpeg2_sequence: *mut v4l2_ctrl_mpeg2_sequence,
    pub p_mpeg2_picture: *mut v4l2_ctrl_mpeg2_picture,
    pub p_mpeg2_quantisation: *mut v4l2_ctrl_mpeg2_quantisation,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_ext_controls {
    pub __bindgen_anon_1: v4l2_ext_controls__bindgen_ty_1,
    pub count: __u32,
    pub error_idx: __u32,
    pub request_fd: __s32,
    pub reserved: [__u32; 1usize],
    pub controls: *mut v4l2_ext_control,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_ext_controls__bindgen_ty_1 {
    pub ctrl_class: __u32,
    pub which: __u32,
}
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_INTEGER: v4l2_ctrl_type = 1;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_BOOLEAN: v4l2_ctrl_type = 2;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MENU: v4l2_ctrl_type = 3;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_BUTTON: v4l2_ctrl_type = 4;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_INTEGER64: v4l2_ctrl_type = 5;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_CTRL_CLASS: v4l2_ctrl_type = 6;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_STRING: v4l2_ctrl_type = 7;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_BITMASK: v4l2_ctrl_type = 8;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_INTEGER_MENU: v4l2_ctrl_type = 9;
pub const v4l2_ctrl_type_V4L2_CTRL_COMPOUND_TYPES: v4l2_ctrl_type = 256;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_U8: v4l2_ctrl_type = 256;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_U16: v4l2_ctrl_type = 257;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_U32: v4l2_ctrl_type = 258;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_AREA: v4l2_ctrl_type = 262;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_HDR10_CLL_INFO: v4l2_ctrl_type = 272;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY: v4l2_ctrl_type = 273;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_SPS: v4l2_ctrl_type = 512;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_PPS: v4l2_ctrl_type = 513;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_SCALING_MATRIX: v4l2_ctrl_type = 514;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_SLICE_PARAMS: v4l2_ctrl_type = 515;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_DECODE_PARAMS: v4l2_ctrl_type = 516;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_H264_PRED_WEIGHTS: v4l2_ctrl_type = 517;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_FWHT_PARAMS: v4l2_ctrl_type = 544;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_VP8_FRAME: v4l2_ctrl_type = 576;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MPEG2_QUANTISATION: v4l2_ctrl_type = 592;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MPEG2_SEQUENCE: v4l2_ctrl_type = 593;
pub const v4l2_ctrl_type_V4L2_CTRL_TYPE_MPEG2_PICTURE: v4l2_ctrl_type = 594;
pub type v4l2_ctrl_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_queryctrl {
    pub id: __u32,
    pub type_: __u32,
    pub name: [__u8; 32usize],
    pub minimum: __s32,
    pub maximum: __s32,
    pub step: __s32,
    pub default_value: __s32,
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_query_ext_ctrl {
    pub id: __u32,
    pub type_: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
    pub minimum: __s64,
    pub maximum: __s64,
    pub step: __u64,
    pub default_value: __s64,
    pub flags: __u32,
    pub elem_size: __u32,
    pub elems: __u32,
    pub nr_of_dims: __u32,
    pub dims: [__u32; 4usize],
    pub reserved: [__u32; 32usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_querymenu {
    pub id: __u32,
    pub index: __u32,
    pub __bindgen_anon_1: v4l2_querymenu__bindgen_ty_1,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_querymenu__bindgen_ty_1 {
    pub name: [__u8; 32usize],
    pub value: __s64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_tuner {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub type_: __u32,
    pub capability: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub rxsubchans: __u32,
    pub audmode: __u32,
    pub signal: __s32,
    pub afc: __s32,
    pub reserved: [__u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_modulator {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub capability: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub txsubchans: __u32,
    pub type_: __u32,
    pub reserved: [__u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frequency {
    pub tuner: __u32,
    pub type_: __u32,
    pub frequency: __u32,
    pub reserved: [__u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_frequency_band {
    pub tuner: __u32,
    pub type_: __u32,
    pub index: __u32,
    pub capability: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub modulation: __u32,
    pub reserved: [__u32; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_hw_freq_seek {
    pub tuner: __u32,
    pub type_: __u32,
    pub seek_upward: __u32,
    pub wrap_around: __u32,
    pub spacing: __u32,
    pub rangelow: __u32,
    pub rangehigh: __u32,
    pub reserved: [__u32; 5usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_rds_data {
    pub lsb: __u8,
    pub msb: __u8,
    pub block: __u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_audio {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub capability: __u32,
    pub mode: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_audioout {
    pub index: __u32,
    pub name: [__u8; 32usize],
    pub capability: __u32,
    pub mode: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_enc_idx_entry {
    pub offset: __u64,
    pub pts: __u64,
    pub length: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_enc_idx {
    pub entries: __u32,
    pub entries_cap: __u32,
    pub reserved: [__u32; 4usize],
    pub entry: [v4l2_enc_idx_entry; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_encoder_cmd {
    pub cmd: __u32,
    pub flags: __u32,
    pub __bindgen_anon_1: v4l2_encoder_cmd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_encoder_cmd__bindgen_ty_1 {
    pub raw: v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_encoder_cmd__bindgen_ty_1__bindgen_ty_1 {
    pub data: [__u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_decoder_cmd {
    pub cmd: __u32,
    pub flags: __u32,
    pub __bindgen_anon_1: v4l2_decoder_cmd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_decoder_cmd__bindgen_ty_1 {
    pub stop: v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1,
    pub start: v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2,
    pub raw: v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_1 {
    pub pts: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_2 {
    pub speed: __s32,
    pub format: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_decoder_cmd__bindgen_ty_1__bindgen_ty_3 {
    pub data: [__u32; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_vbi_format {
    pub sampling_rate: __u32,
    pub offset: __u32,
    pub samples_per_line: __u32,
    pub sample_format: __u32,
    pub start: [__s32; 2usize],
    pub count: [__u32; 2usize],
    pub flags: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sliced_vbi_format {
    pub service_set: __u16,
    pub service_lines: [[__u16; 24usize]; 2usize],
    pub io_size: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sliced_vbi_cap {
    pub service_set: __u16,
    pub service_lines: [[__u16; 24usize]; 2usize],
    pub type_: __u32,
    pub reserved: [__u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sliced_vbi_data {
    pub id: __u32,
    pub field: __u32,
    pub line: __u32,
    pub reserved: __u32,
    pub data: [__u8; 48usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_mpeg_vbi_itv0_line {
    pub id: __u8,
    pub data: [__u8; 42usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_mpeg_vbi_itv0 {
    pub linemask: [__le32; 2usize],
    pub line: [v4l2_mpeg_vbi_itv0_line; 35usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_mpeg_vbi_ITV0 {
    pub line: [v4l2_mpeg_vbi_itv0_line; 36usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_mpeg_vbi_fmt_ivtv {
    pub magic: [__u8; 4usize],
    pub __bindgen_anon_1: v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_mpeg_vbi_fmt_ivtv__bindgen_ty_1 {
    pub itv0: v4l2_mpeg_vbi_itv0,
    pub ITV0: v4l2_mpeg_vbi_ITV0,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_plane_pix_format {
    pub sizeimage: __u32,
    pub bytesperline: __u32,
    pub reserved: [__u16; 6usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_pix_format_mplane {
    pub width: __u32,
    pub height: __u32,
    pub pixelformat: __u32,
    pub field: __u32,
    pub colorspace: __u32,
    pub plane_fmt: [v4l2_plane_pix_format; 8usize],
    pub num_planes: __u8,
    pub flags: __u8,
    pub __bindgen_anon_1: v4l2_pix_format_mplane__bindgen_ty_1,
    pub quantization: __u8,
    pub xfer_func: __u8,
    pub reserved: [__u8; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_pix_format_mplane__bindgen_ty_1 {
    pub ycbcr_enc: __u8,
    pub hsv_enc: __u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_sdr_format {
    pub pixelformat: __u32,
    pub buffersize: __u32,
    pub reserved: [__u8; 24usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_meta_format {
    pub dataformat: __u32,
    pub buffersize: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_format {
    pub type_: __u32,
    pub fmt: v4l2_format__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_format__bindgen_ty_1 {
    pub pix: v4l2_pix_format,
    pub pix_mp: v4l2_pix_format_mplane,
    pub win: v4l2_window,
    pub vbi: v4l2_vbi_format,
    pub sliced: v4l2_sliced_vbi_format,
    pub sdr: v4l2_sdr_format,
    pub meta: v4l2_meta_format,
    pub raw_data: [__u8; 200usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_streamparm {
    pub type_: __u32,
    pub parm: v4l2_streamparm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_streamparm__bindgen_ty_1 {
    pub capture: v4l2_captureparm,
    pub output: v4l2_outputparm,
    pub raw_data: [__u8; 200usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_vsync {
    pub field: __u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_event_ctrl {
    pub changes: __u32,
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_event_ctrl__bindgen_ty_1,
    pub flags: __u32,
    pub minimum: __s32,
    pub maximum: __s32,
    pub step: __s32,
    pub default_value: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_event_ctrl__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_frame_sync {
    pub frame_sequence: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_src_change {
    pub changes: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_motion_det {
    pub flags: __u32,
    pub frame_sequence: __u32,
    pub region_mask: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_event {
    pub type_: __u32,
    pub u: v4l2_event__bindgen_ty_1,
    pub pending: __u32,
    pub sequence: __u32,
    pub timestamp: timespec,
    pub id: __u32,
    pub reserved: [__u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_event__bindgen_ty_1 {
    pub vsync: v4l2_event_vsync,
    pub ctrl: v4l2_event_ctrl,
    pub frame_sync: v4l2_event_frame_sync,
    pub src_change: v4l2_event_src_change,
    pub motion_det: v4l2_event_motion_det,
    pub data: [__u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct v4l2_event_subscription {
    pub type_: __u32,
    pub id: __u32,
    pub flags: __u32,
    pub reserved: [__u32; 5usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dbg_match {
    pub type_: __u32,
    pub __bindgen_anon_1: v4l2_dbg_match__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union v4l2_dbg_match__bindgen_ty_1 {
    pub addr: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dbg_register {
    pub match_: v4l2_dbg_match,
    pub size: __u32,
    pub reg: __u64,
    pub val: __u64,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct v4l2_dbg_chip_info {
    pub match_: v4l2_dbg_match,
    pub name: [::std::os::raw::c_char; 32usize],
    pub flags: __u32,
    pub reserved: [__u32; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct v4l2_create_buffers {
    pub index: __u32,
    pub count: __u32,
    pub memory: __u32,
    pub format: v4l2_format,
    pub capabilities: __u32,
    pub reserved: [__u32; 7usize],
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const IMPDeviceID_DEV_ID_FS: IMPDeviceID = 0;
pub const IMPDeviceID_DEV_ID_ENC: IMPDeviceID = 1;
pub const IMPDeviceID_DEV_ID_DEC: IMPDeviceID = 2;
pub const IMPDeviceID_DEV_ID_IVS: IMPDeviceID = 3;
pub const IMPDeviceID_DEV_ID_OSD: IMPDeviceID = 4;
pub const IMPDeviceID_DEV_ID_FG1DIRECT: IMPDeviceID = 5;
pub const IMPDeviceID_DEV_ID_RESERVED_START: IMPDeviceID = 6;
pub const IMPDeviceID_DEV_ID_RESERVED_END: IMPDeviceID = 23;
pub const IMPDeviceID_NR_MAX_DEVICES: IMPDeviceID = 24;
pub type IMPDeviceID = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPCell {
    pub deviceID: IMPDeviceID,
    pub groupID: ::std::os::raw::c_int,
    pub outputID: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct IMPFrameInfo {
    pub index: ::std::os::raw::c_int,
    pub pool_idx: ::std::os::raw::c_int,
    pub width: u32,
    pub height: u32,
    pub pixfmt: u32,
    pub size: u32,
    pub phyAddr: u32,
    pub virAddr: u32,
    pub timeStamp: i64,
    pub priv_: __IncompleteArrayField<u32>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPFrameTimestamp {
    pub ts: u64,
    pub minus: u64,
    pub plus: u64,
}
pub const IMPPayloadType_PT_JPEG: IMPPayloadType = 0;
pub const IMPPayloadType_PT_H264: IMPPayloadType = 1;
pub const IMPPayloadType_PT_H265: IMPPayloadType = 2;
pub type IMPPayloadType = ::std::os::raw::c_uint;
pub const IMPPixelFormat_PIX_FMT_YUV420P: IMPPixelFormat = 0;
pub const IMPPixelFormat_PIX_FMT_YUYV422: IMPPixelFormat = 1;
pub const IMPPixelFormat_PIX_FMT_UYVY422: IMPPixelFormat = 2;
pub const IMPPixelFormat_PIX_FMT_YUV422P: IMPPixelFormat = 3;
pub const IMPPixelFormat_PIX_FMT_YUV444P: IMPPixelFormat = 4;
pub const IMPPixelFormat_PIX_FMT_YUV410P: IMPPixelFormat = 5;
pub const IMPPixelFormat_PIX_FMT_YUV411P: IMPPixelFormat = 6;
pub const IMPPixelFormat_PIX_FMT_GRAY8: IMPPixelFormat = 7;
pub const IMPPixelFormat_PIX_FMT_MONOWHITE: IMPPixelFormat = 8;
pub const IMPPixelFormat_PIX_FMT_MONOBLACK: IMPPixelFormat = 9;
pub const IMPPixelFormat_PIX_FMT_NV12: IMPPixelFormat = 10;
pub const IMPPixelFormat_PIX_FMT_NV21: IMPPixelFormat = 11;
pub const IMPPixelFormat_PIX_FMT_RGB24: IMPPixelFormat = 12;
pub const IMPPixelFormat_PIX_FMT_BGR24: IMPPixelFormat = 13;
pub const IMPPixelFormat_PIX_FMT_ARGB: IMPPixelFormat = 14;
pub const IMPPixelFormat_PIX_FMT_RGBA: IMPPixelFormat = 15;
pub const IMPPixelFormat_PIX_FMT_ABGR: IMPPixelFormat = 16;
pub const IMPPixelFormat_PIX_FMT_BGRA: IMPPixelFormat = 17;
pub const IMPPixelFormat_PIX_FMT_RGB565BE: IMPPixelFormat = 18;
pub const IMPPixelFormat_PIX_FMT_RGB565LE: IMPPixelFormat = 19;
pub const IMPPixelFormat_PIX_FMT_RGB555BE: IMPPixelFormat = 20;
pub const IMPPixelFormat_PIX_FMT_RGB555LE: IMPPixelFormat = 21;
pub const IMPPixelFormat_PIX_FMT_BGR565BE: IMPPixelFormat = 22;
pub const IMPPixelFormat_PIX_FMT_BGR565LE: IMPPixelFormat = 23;
pub const IMPPixelFormat_PIX_FMT_BGR555BE: IMPPixelFormat = 24;
pub const IMPPixelFormat_PIX_FMT_BGR555LE: IMPPixelFormat = 25;
pub const IMPPixelFormat_PIX_FMT_0RGB: IMPPixelFormat = 26;
pub const IMPPixelFormat_PIX_FMT_RGB0: IMPPixelFormat = 27;
pub const IMPPixelFormat_PIX_FMT_0BGR: IMPPixelFormat = 28;
pub const IMPPixelFormat_PIX_FMT_BGR0: IMPPixelFormat = 29;
pub const IMPPixelFormat_PIX_FMT_BAYER_BGGR8: IMPPixelFormat = 30;
pub const IMPPixelFormat_PIX_FMT_BAYER_RGGB8: IMPPixelFormat = 31;
pub const IMPPixelFormat_PIX_FMT_BAYER_GBRG8: IMPPixelFormat = 32;
pub const IMPPixelFormat_PIX_FMT_BAYER_GRBG8: IMPPixelFormat = 33;
pub const IMPPixelFormat_PIX_FMT_RAW: IMPPixelFormat = 34;
pub const IMPPixelFormat_PIX_FMT_HSV: IMPPixelFormat = 35;
pub const IMPPixelFormat_PIX_FMT_NB: IMPPixelFormat = 36;
pub type IMPPixelFormat = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPPoint {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPRect {
    pub p0: IMPPoint,
    pub p1: IMPPoint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDecoderAttr {
    pub decType: IMPPayloadType,
    pub maxWidth: u32,
    pub maxHeight: u32,
    pub pixelFormat: IMPPixelFormat,
    pub nrKeepStream: u32,
    pub frmRateNum: u32,
    pub frmRateDen: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDecoderCHNAttr {
    pub decAttr: IMPDecoderAttr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDecoderNal {
    pub i_payload: ::std::os::raw::c_int,
    pub p_payload: *mut u8,
    pub timeStamp: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDecoderStream {
    pub decoderNal: IMPDecoderNal,
}
extern "C" {
    pub fn IMP_Decoder_CreateChn(
        decChn: ::std::os::raw::c_int,
        attr: *const IMPDecoderCHNAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_DestroyChn(decChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_StartRecvPic(decChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_StopRecvPic(decChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_SendStreamTimeout(
        decChn: ::std::os::raw::c_int,
        stream: *mut IMPDecoderStream,
        timeoutMsec: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_PollingFrame(
        decChn: ::std::os::raw::c_int,
        timeoutMsec: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_GetFrame(
        decChn: ::std::os::raw::c_int,
        frame: *mut *mut IMPFrameInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Decoder_ReleaseFrame(
        decChn: ::std::os::raw::c_int,
        frame: *mut IMPFrameInfo,
    ) -> ::std::os::raw::c_int;
}
pub const IMPDmicSampleRate_DMIC_SAMPLE_RATE_8000: IMPDmicSampleRate = 8000;
pub const IMPDmicSampleRate_DMIC_SAMPLE_RATE_16000: IMPDmicSampleRate = 16000;
pub type IMPDmicSampleRate = ::std::os::raw::c_uint;
pub const IMPDmicBitWidth_DMIC_BIT_WIDTH_16: IMPDmicBitWidth = 16;
pub type IMPDmicBitWidth = ::std::os::raw::c_uint;
pub const IMPDmicSoundMode_DMIC_SOUND_MODE_MONO: IMPDmicSoundMode = 1;
pub const IMPDmicSoundMode_DMIC_SOUND_MODE_STEREO: IMPDmicSoundMode = 2;
pub type IMPDmicSoundMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDmicAttr {
    pub samplerate: IMPDmicSampleRate,
    pub bitwidth: IMPDmicBitWidth,
    pub soundmode: IMPDmicSoundMode,
    pub frmNum: ::std::os::raw::c_int,
    pub numPerFrm: ::std::os::raw::c_int,
    pub chnCnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDmicFrame {
    pub bitwidth: IMPDmicBitWidth,
    pub soundmode: IMPDmicSoundMode,
    pub virAddr: *mut u32,
    pub phyAddr: u32,
    pub timeStamp: i64,
    pub seq: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDmicChnFrame {
    pub rawFrame: IMPDmicFrame,
    pub aecFrame: IMPDmicFrame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPDmicChnParam {
    pub usrFrmDepth: ::std::os::raw::c_int,
    pub Rev: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DmicXInfo {
    pub dmic_id: ::std::os::raw::c_int,
    pub dmic_en: ::std::os::raw::c_int,
}
extern "C" {
    pub fn IMP_DMIC_SetUserInfo(
        dmicDevId: ::std::os::raw::c_int,
        aecDmicId: ::std::os::raw::c_int,
        need_aec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_SetPubAttr(
        dmicDevId: ::std::os::raw::c_int,
        attr: *mut IMPDmicAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_GetPubAttr(
        dmicDevId: ::std::os::raw::c_int,
        attr: *mut IMPDmicAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_Enable(dmicDevId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_Disable(dmicDevId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_EnableChn(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_DisableChn(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_SetChnParam(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        chnParam: *mut IMPDmicChnParam,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_GetChnParam(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        chnParam: *mut IMPDmicChnParam,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_GetFrame(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        chnFrm: *mut IMPDmicChnFrame,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_ReleaseFrame(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        chnFrm: *mut IMPDmicChnFrame,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_EnableAecRefFrame(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        audioAoDevId: ::std::os::raw::c_int,
        aoChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_GetFrameAndRef(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        chnFrm: *mut IMPDmicChnFrame,
        ref_: *mut IMPDmicFrame,
        block: IMPBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_EnableAec(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        aoDevId: ::std::os::raw::c_int,
        aoChId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_DisableAec(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_PollingFrame(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_SetVol(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        dmicVol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_GetVol(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        dmicVol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_SetGain(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        dmicGain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_DMIC_GetGain(
        dmicDevId: ::std::os::raw::c_int,
        dmicChnId: ::std::os::raw::c_int,
        dmicGain: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const IMPEncoderH264NaluType_IMP_H264_NAL_UNKNOWN: IMPEncoderH264NaluType = 0;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SLICE: IMPEncoderH264NaluType = 1;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SLICE_DPA: IMPEncoderH264NaluType = 2;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SLICE_DPB: IMPEncoderH264NaluType = 3;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SLICE_DPC: IMPEncoderH264NaluType = 4;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SLICE_IDR: IMPEncoderH264NaluType = 5;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SEI: IMPEncoderH264NaluType = 6;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_SPS: IMPEncoderH264NaluType = 7;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_PPS: IMPEncoderH264NaluType = 8;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_AUD: IMPEncoderH264NaluType = 9;
pub const IMPEncoderH264NaluType_IMP_H264_NAL_FILLER: IMPEncoderH264NaluType = 12;
pub type IMPEncoderH264NaluType = ::std::os::raw::c_uint;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_TRAIL_N: IMPEncoderH265NaluType = 0;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_TRAIL_R: IMPEncoderH265NaluType = 1;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_TSA_N: IMPEncoderH265NaluType = 2;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_TSA_R: IMPEncoderH265NaluType = 3;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_STSA_N: IMPEncoderH265NaluType = 4;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_STSA_R: IMPEncoderH265NaluType = 5;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_RADL_N: IMPEncoderH265NaluType = 6;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_RADL_R: IMPEncoderH265NaluType = 7;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_RASL_N: IMPEncoderH265NaluType = 8;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_RASL_R: IMPEncoderH265NaluType = 9;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_BLA_W_LP: IMPEncoderH265NaluType = 16;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_BLA_W_RADL: IMPEncoderH265NaluType = 17;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_BLA_N_LP: IMPEncoderH265NaluType = 18;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_IDR_W_RADL: IMPEncoderH265NaluType = 19;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_IDR_N_LP: IMPEncoderH265NaluType = 20;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SLICE_CRA: IMPEncoderH265NaluType = 21;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_VPS: IMPEncoderH265NaluType = 32;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SPS: IMPEncoderH265NaluType = 33;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_PPS: IMPEncoderH265NaluType = 34;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_AUD: IMPEncoderH265NaluType = 35;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_EOS: IMPEncoderH265NaluType = 36;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_EOB: IMPEncoderH265NaluType = 37;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_FILLER_DATA: IMPEncoderH265NaluType = 38;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_PREFIX_SEI: IMPEncoderH265NaluType = 39;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_SUFFIX_SEI: IMPEncoderH265NaluType = 40;
pub const IMPEncoderH265NaluType_IMP_H265_NAL_INVALID: IMPEncoderH265NaluType = 64;
pub type IMPEncoderH265NaluType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPEncoderNalType {
    pub h264NalType: IMPEncoderH264NaluType,
    pub h265NalType: IMPEncoderH265NaluType,
}
pub const IMPEncoderSliceType_IMP_ENC_SLICE_SI: IMPEncoderSliceType = 4;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_SP: IMPEncoderSliceType = 3;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_GOLDEN: IMPEncoderSliceType = 3;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_I: IMPEncoderSliceType = 2;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_P: IMPEncoderSliceType = 1;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_B: IMPEncoderSliceType = 0;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_CONCEAL: IMPEncoderSliceType = 6;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_SKIP: IMPEncoderSliceType = 7;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_REPEAT: IMPEncoderSliceType = 8;
pub const IMPEncoderSliceType_IMP_ENC_SLICE_MAX_ENUM: IMPEncoderSliceType = 9;
pub type IMPEncoderSliceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPEncoderPack {
    pub offset: u32,
    pub length: u32,
    pub timestamp: i64,
    pub frameEnd: bool,
    pub nalType: IMPEncoderNalType,
    pub sliceType: IMPEncoderSliceType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderStream {
    pub phyAddr: u32,
    pub virAddr: u32,
    pub streamSize: u32,
    pub pack: *mut IMPEncoderPack,
    pub packCount: u32,
    pub seq: u32,
}
pub const IMPEncoderEncType_IMP_ENC_TYPE_AVC: IMPEncoderEncType = 0;
pub const IMPEncoderEncType_IMP_ENC_TYPE_HEVC: IMPEncoderEncType = 1;
pub const IMPEncoderEncType_IMP_ENC_TYPE_JPEG: IMPEncoderEncType = 4;
pub type IMPEncoderEncType = ::std::os::raw::c_uint;
pub const IMPEncoderProfile_IMP_ENC_PROFILE_AVC_BASELINE: IMPEncoderProfile = 66;
pub const IMPEncoderProfile_IMP_ENC_PROFILE_AVC_MAIN: IMPEncoderProfile = 77;
pub const IMPEncoderProfile_IMP_ENC_PROFILE_AVC_HIGH: IMPEncoderProfile = 100;
pub const IMPEncoderProfile_IMP_ENC_PROFILE_HEVC_MAIN: IMPEncoderProfile = 16777217;
pub const IMPEncoderProfile_IMP_ENC_PROFILE_JPEG: IMPEncoderProfile = 67108864;
pub type IMPEncoderProfile = ::std::os::raw::c_uint;
pub const IMPEncoderPicFormat_IMP_ENC_PIC_FORMAT_400_8BITS: IMPEncoderPicFormat = 136;
pub const IMPEncoderPicFormat_IMP_ENC_PIC_FORMAT_420_8BITS: IMPEncoderPicFormat = 392;
pub const IMPEncoderPicFormat_IMP_ENC_PIC_FORMAT_422_8BITS: IMPEncoderPicFormat = 648;
pub type IMPEncoderPicFormat = ::std::os::raw::c_uint;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_QP_TAB_RELATIVE: IMPEncoderEncOptions = 1;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_FIX_PREDICTOR: IMPEncoderEncOptions = 2;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_CUSTOM_LDA: IMPEncoderEncOptions = 4;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_ENABLE_AUTO_QP: IMPEncoderEncOptions = 8;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_ADAPT_AUTO_QP: IMPEncoderEncOptions = 16;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_COMPRESS: IMPEncoderEncOptions = 32;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_FORCE_REC: IMPEncoderEncOptions = 64;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_FORCE_MV_OUT: IMPEncoderEncOptions = 128;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_HIGH_FREQ: IMPEncoderEncOptions = 8192;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_SRD: IMPEncoderEncOptions = 32768;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_FORCE_MV_CLIP: IMPEncoderEncOptions = 131072;
pub const IMPEncoderEncOptions_IMP_ENC_OPT_RDO_COST_MODE: IMPEncoderEncOptions = 262144;
pub type IMPEncoderEncOptions = ::std::os::raw::c_uint;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_WPP: IMPEncoderEncTools = 1;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_TILE: IMPEncoderEncTools = 2;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_LF: IMPEncoderEncTools = 4;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_LF_X_SLICE: IMPEncoderEncTools = 8;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_LF_X_TILE: IMPEncoderEncTools = 16;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_SCL_LST: IMPEncoderEncTools = 32;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_CONST_INTRA_PRED: IMPEncoderEncTools = 64;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_TRANSFO_SKIP: IMPEncoderEncTools = 128;
pub const IMPEncoderEncTools_IMP_ENC_TOOL_PCM: IMPEncoderEncTools = 2048;
pub type IMPEncoderEncTools = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderCropCfg {
    pub enable: bool,
    pub x: u32,
    pub y: u32,
    pub w: u32,
    pub h: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderEncAttr {
    pub eProfile: IMPEncoderProfile,
    pub uLevel: u8,
    pub uTier: u8,
    pub uWidth: u16,
    pub uHeight: u16,
    pub ePicFormat: IMPEncoderPicFormat,
    pub eEncOptions: u32,
    pub eEncTools: u32,
    pub crop: IMPEncoderCropCfg,
}
pub const IMPEncoderGopCtrlMode_IMP_ENC_GOP_CTRL_MODE_DEFAULT: IMPEncoderGopCtrlMode = 2;
pub const IMPEncoderGopCtrlMode_IMP_ENC_GOP_CTRL_MODE_PYRAMIDAL: IMPEncoderGopCtrlMode = 4;
pub const IMPEncoderGopCtrlMode_IMP_ENC_GOP_CTRL_MAX_ENUM: IMPEncoderGopCtrlMode = 255;
pub type IMPEncoderGopCtrlMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderGopAttr {
    pub uGopCtrlMode: IMPEncoderGopCtrlMode,
    pub uGopLength: u16,
    pub uNumB: u8,
    pub uMaxSameSenceCnt: u32,
    pub bEnableLT: bool,
    pub uFreqLT: u32,
    pub bLTRC: bool,
}
pub const IMPEncoderRcMode_IMP_ENC_RC_MODE_FIXQP: IMPEncoderRcMode = 0;
pub const IMPEncoderRcMode_IMP_ENC_RC_MODE_CBR: IMPEncoderRcMode = 1;
pub const IMPEncoderRcMode_IMP_ENC_RC_MODE_VBR: IMPEncoderRcMode = 2;
pub const IMPEncoderRcMode_IMP_ENC_RC_MODE_CAPPED_VBR: IMPEncoderRcMode = 4;
pub const IMPEncoderRcMode_IMP_ENC_RC_MODE_CAPPED_QUALITY: IMPEncoderRcMode = 8;
pub const IMPEncoderRcMode_IMP_ENC_RC_MODE_INVALID: IMPEncoderRcMode = 255;
pub type IMPEncoderRcMode = ::std::os::raw::c_uint;
pub const IMPEncoderRcOptions_IMP_ENC_RC_OPT_NONE: IMPEncoderRcOptions = 0;
pub const IMPEncoderRcOptions_IMP_ENC_RC_SCN_CHG_RES: IMPEncoderRcOptions = 1;
pub const IMPEncoderRcOptions_IMP_ENC_RC_DELAYED: IMPEncoderRcOptions = 2;
pub const IMPEncoderRcOptions_IMP_ENC_RC_STATIC_SCENE: IMPEncoderRcOptions = 4;
pub const IMPEncoderRcOptions_IMP_ENC_RC_ENABLE_SKIP: IMPEncoderRcOptions = 8;
pub const IMPEncoderRcOptions_IMP_ENC_RC_OPT_SC_PREVENTION: IMPEncoderRcOptions = 16;
pub const IMPEncoderRcOptions_IMP_ENC_RC_MAX_ENUM: IMPEncoderRcOptions = 17;
pub type IMPEncoderRcOptions = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderAttrFixQP {
    pub iInitialQP: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderAttrCbr {
    pub uTargetBitRate: u32,
    pub iInitialQP: i16,
    pub iMinQP: i16,
    pub iMaxQP: i16,
    pub iIPDelta: i16,
    pub iPBDelta: i16,
    pub eRcOptions: u32,
    pub uMaxPictureSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderAttrVbr {
    pub uTargetBitRate: u32,
    pub uMaxBitRate: u32,
    pub iInitialQP: i16,
    pub iMinQP: i16,
    pub iMaxQP: i16,
    pub iIPDelta: i16,
    pub iPBDelta: i16,
    pub eRcOptions: u32,
    pub uMaxPictureSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderAttrCappedVbr {
    pub uTargetBitRate: u32,
    pub uMaxBitRate: u32,
    pub iInitialQP: i16,
    pub iMinQP: i16,
    pub iMaxQP: i16,
    pub iIPDelta: i16,
    pub iPBDelta: i16,
    pub eRcOptions: u32,
    pub uMaxPictureSize: u32,
    pub uMaxPSNR: u16,
}
pub type IMPEncoderAttrCappedQuality = IMPEncoderAttrCappedVbr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPEncoderAttrRcMode {
    pub rcMode: IMPEncoderRcMode,
    pub __bindgen_anon_1: IMPEncoderAttrRcMode__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPEncoderAttrRcMode__bindgen_ty_1 {
    pub attrFixQp: IMPEncoderAttrFixQP,
    pub attrCbr: IMPEncoderAttrCbr,
    pub attrVbr: IMPEncoderAttrVbr,
    pub attrCappedVbr: IMPEncoderAttrCappedVbr,
    pub attrCappedQuality: IMPEncoderAttrCappedQuality,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderFrmRate {
    pub frmRateNum: u32,
    pub frmRateDen: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPEncoderRcAttr {
    pub attrRcMode: IMPEncoderAttrRcMode,
    pub outFrmRate: IMPEncoderFrmRate,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPEncoderChnAttr {
    pub encAttr: IMPEncoderEncAttr,
    pub rcAttr: IMPEncoderRcAttr,
    pub gopAttr: IMPEncoderGopAttr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPEncoderChnStat {
    pub registered: bool,
    pub leftPics: u32,
    pub leftStreamBytes: u32,
    pub leftStreamFrames: u32,
    pub curPacks: u32,
    pub work_done: u32,
}
extern "C" {
    pub fn IMP_Encoder_CreateGroup(encGroup: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_DestroyGroup(encGroup: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetDefaultParam(
        chnAttr: *mut IMPEncoderChnAttr,
        profile: IMPEncoderProfile,
        rcMode: IMPEncoderRcMode,
        uWidth: u16,
        uHeight: u16,
        frmRateNum: u32,
        frmRateDen: u32,
        uGopLength: u32,
        uMaxSameSenceCnt: ::std::os::raw::c_int,
        iInitialQP: ::std::os::raw::c_int,
        uTargetBitRate: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_CreateChn(
        encChn: ::std::os::raw::c_int,
        attr: *const IMPEncoderChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_DestroyChn(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetChnAttr(
        encChn: ::std::os::raw::c_int,
        attr: *mut IMPEncoderChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_RegisterChn(
        encGroup: ::std::os::raw::c_int,
        encChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_UnRegisterChn(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_StartRecvPic(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_StopRecvPic(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_Query(
        encChn: ::std::os::raw::c_int,
        stat: *mut IMPEncoderChnStat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetStream(
        encChn: ::std::os::raw::c_int,
        stream: *mut IMPEncoderStream,
        blockFlag: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_ReleaseStream(
        encChn: ::std::os::raw::c_int,
        stream: *mut IMPEncoderStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_PollingStream(
        encChn: ::std::os::raw::c_int,
        timeoutMsec: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_PollingModuleStream(
        encChnBitmap: *mut u32,
        timeoutMsec: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetFd(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetbufshareChn(
        encChn: ::std::os::raw::c_int,
        shareChn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetChnResizeMode(
        encChn: ::std::os::raw::c_int,
        en: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetMaxStreamCnt(
        encChn: ::std::os::raw::c_int,
        nrMaxStream: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetMaxStreamCnt(
        encChn: ::std::os::raw::c_int,
        nrMaxStream: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_RequestIDR(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_FlushStream(encChn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetChnFrmRate(
        encChn: ::std::os::raw::c_int,
        pstFps: *mut IMPEncoderFrmRate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetChnFrmRate(
        encChn: ::std::os::raw::c_int,
        pstFps: *const IMPEncoderFrmRate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetChnBitRate(
        encChn: ::std::os::raw::c_int,
        iTargetBitRate: ::std::os::raw::c_int,
        iMaxBitRate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetChnGopLength(
        encChn: ::std::os::raw::c_int,
        iGopLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetChnAttrRcMode(
        encChn: ::std::os::raw::c_int,
        pstRcModeCfg: *mut IMPEncoderAttrRcMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetChnAttrRcMode(
        encChn: ::std::os::raw::c_int,
        pstRcModeCfg: *const IMPEncoderAttrRcMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetChnGopAttr(
        encChn: ::std::os::raw::c_int,
        pGopAttr: *mut IMPEncoderGopAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetChnGopAttr(
        encChn: ::std::os::raw::c_int,
        pGopAttr: *const IMPEncoderGopAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_SetFisheyeEnableStatus(
        encChn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetFisheyeEnableStatus(
        encChn: ::std::os::raw::c_int,
        enable: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_Encoder_GetChnEncType(
        encChn: ::std::os::raw::c_int,
        encType: *mut IMPEncoderEncType,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPFSChnCrop {
    pub enable: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPFSChnScaler {
    pub enable: ::std::os::raw::c_int,
    pub outwidth: ::std::os::raw::c_int,
    pub outheight: ::std::os::raw::c_int,
}
pub const IMPFSChnType_FS_PHY_CHANNEL: IMPFSChnType = 0;
pub const IMPFSChnType_FS_EXT_CHANNEL: IMPFSChnType = 1;
pub type IMPFSChnType = ::std::os::raw::c_uint;
pub const IMPFSChnFifoType_FIFO_CACHE_PRIORITY: IMPFSChnFifoType = 0;
pub const IMPFSChnFifoType_FIFO_DATA_PRIORITY: IMPFSChnFifoType = 1;
pub type IMPFSChnFifoType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPFSChnFifoAttr {
    pub maxdepth: ::std::os::raw::c_int,
    pub type_: IMPFSChnFifoType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPFSChnAttr {
    pub picWidth: ::std::os::raw::c_int,
    pub picHeight: ::std::os::raw::c_int,
    pub pixFmt: IMPPixelFormat,
    pub crop: IMPFSChnCrop,
    pub scaler: IMPFSChnScaler,
    pub outFrmRateNum: ::std::os::raw::c_int,
    pub outFrmRateDen: ::std::os::raw::c_int,
    pub nrVBs: ::std::os::raw::c_int,
    pub type_: IMPFSChnType,
    pub fcrop: IMPFSChnCrop,
}
extern "C" {
    pub fn IMP_FrameSource_CreateChn(
        chnNum: ::std::os::raw::c_int,
        chn_attr: *mut IMPFSChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_DestroyChn(chnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_EnableChn(chnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_DisableChn(chnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SetSource(
        extchnNum: ::std::os::raw::c_int,
        sourcechnNum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetChnAttr(
        chnNum: ::std::os::raw::c_int,
        chnAttr: *mut IMPFSChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SetChnAttr(
        chnNum: ::std::os::raw::c_int,
        chnAttr: *const IMPFSChnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SetFrameDepth(
        chnNum: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetFrameDepth(
        chnNum: ::std::os::raw::c_int,
        depth: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetFrame(
        chnNum: ::std::os::raw::c_int,
        frame: *mut *mut IMPFrameInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetTimedFrame(
        chnNum: ::std::os::raw::c_int,
        framets: *mut IMPFrameTimestamp,
        block: ::std::os::raw::c_int,
        framedata: *mut ::std::os::raw::c_void,
        frame: *mut IMPFrameInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_ReleaseFrame(
        chnNum: ::std::os::raw::c_int,
        frame: *mut IMPFrameInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SnapFrame(
        chnNum: ::std::os::raw::c_int,
        fmt: IMPPixelFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        framedata: *mut ::std::os::raw::c_void,
        frame: *mut IMPFrameInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SetMaxDelay(
        chnNum: ::std::os::raw::c_int,
        maxcnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetMaxDelay(
        chnNum: ::std::os::raw::c_int,
        maxcnt: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SetDelay(
        chnNum: ::std::os::raw::c_int,
        cnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetDelay(
        chnNum: ::std::os::raw::c_int,
        cnt: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_SetChnFifoAttr(
        chnNum: ::std::os::raw::c_int,
        attr: *mut IMPFSChnFifoAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_FrameSource_GetChnFifoAttr(
        chnNum: ::std::os::raw::c_int,
        attr: *mut IMPFSChnFifoAttr,
    ) -> ::std::os::raw::c_int;
}
pub const IMPSensorControlBusType_TX_SENSOR_CONTROL_INTERFACE_I2C: IMPSensorControlBusType = 1;
pub const IMPSensorControlBusType_TX_SENSOR_CONTROL_INTERFACE_SPI: IMPSensorControlBusType = 2;
pub type IMPSensorControlBusType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPI2CInfo {
    pub type_: [::std::os::raw::c_char; 20usize],
    pub addr: ::std::os::raw::c_int,
    pub i2c_adapter_id: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPSPIInfo {
    pub modalias: [::std::os::raw::c_char; 32usize],
    pub bus_num: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPSensorInfo {
    pub name: [::std::os::raw::c_char; 32usize],
    pub cbus_type: IMPSensorControlBusType,
    pub __bindgen_anon_1: IMPSensorInfo__bindgen_ty_1,
    pub rst_gpio: ::std::os::raw::c_ushort,
    pub pwdn_gpio: ::std::os::raw::c_ushort,
    pub power_gpio: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPSensorInfo__bindgen_ty_1 {
    pub i2c: IMPI2CInfo,
    pub spi: IMPSPIInfo,
}
extern "C" {
    pub fn IMP_ISP_Open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Close() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_AddSensor(pinfo: *mut IMPSensorInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_DelSensor(pinfo: *mut IMPSensorInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_EnableSensor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_DisableSensor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_SetSensorRegister(reg: u32, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_GetSensorRegister(reg: u32, value: *mut u32) -> ::std::os::raw::c_int;
}
pub const IMPISPTuningOpsMode_IMPISP_TUNING_OPS_MODE_DISABLE: IMPISPTuningOpsMode = 0;
pub const IMPISPTuningOpsMode_IMPISP_TUNING_OPS_MODE_ENABLE: IMPISPTuningOpsMode = 1;
pub const IMPISPTuningOpsMode_IMPISP_TUNING_OPS_MODE_BUTT: IMPISPTuningOpsMode = 2;
pub type IMPISPTuningOpsMode = ::std::os::raw::c_uint;
pub const IMPISPTuningOpsType_IMPISP_TUNING_OPS_TYPE_AUTO: IMPISPTuningOpsType = 0;
pub const IMPISPTuningOpsType_IMPISP_TUNING_OPS_TYPE_MANUAL: IMPISPTuningOpsType = 1;
pub const IMPISPTuningOpsType_IMPISP_TUNING_OPS_TYPE_BUTT: IMPISPTuningOpsType = 2;
pub type IMPISPTuningOpsType = ::std::os::raw::c_uint;
extern "C" {
    pub fn IMP_ISP_EnableTuning() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_DisableTuning() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetSensorFPS(fps_num: u32, fps_den: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetSensorFPS(
        fps_num: *mut u32,
        fps_den: *mut u32,
    ) -> ::std::os::raw::c_int;
}
pub const IMPISPAntiflickerAttr_IMPISP_ANTIFLICKER_DISABLE: IMPISPAntiflickerAttr = 0;
pub const IMPISPAntiflickerAttr_IMPISP_ANTIFLICKER_50HZ: IMPISPAntiflickerAttr = 1;
pub const IMPISPAntiflickerAttr_IMPISP_ANTIFLICKER_60HZ: IMPISPAntiflickerAttr = 2;
pub const IMPISPAntiflickerAttr_IMPISP_ANTIFLICKER_BUTT: IMPISPAntiflickerAttr = 3;
pub type IMPISPAntiflickerAttr = ::std::os::raw::c_uint;
extern "C" {
    pub fn IMP_ISP_Tuning_SetAntiFlickerAttr(attr: IMPISPAntiflickerAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAntiFlickerAttr(
        pattr: *mut IMPISPAntiflickerAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetBrightness(bright: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetBrightness(
        pbright: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetContrast(contrast: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetContrast(
        pcontrast: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetSharpness(sharpness: ::std::os::raw::c_uchar)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetSharpness(
        psharpness: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetSaturation(sat: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetSaturation(
        psat: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetISPBypass(enable: IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetTotalGain(gain: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetISPHflip(mode: IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetISPHflip(pmode: *mut IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetISPVflip(mode: IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetISPVflip(pmode: *mut IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
pub const IMPISPRunningMode_IMPISP_RUNNING_MODE_DAY: IMPISPRunningMode = 0;
pub const IMPISPRunningMode_IMPISP_RUNNING_MODE_NIGHT: IMPISPRunningMode = 1;
pub const IMPISPRunningMode_IMPISP_RUNNING_MODE_BUTT: IMPISPRunningMode = 2;
pub type IMPISPRunningMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn IMP_ISP_Tuning_SetISPRunningMode(mode: IMPISPRunningMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetISPRunningMode(pmode: *mut IMPISPRunningMode)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPGamma {
    pub gamma: [u16; 129usize],
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetGamma(gamma: *mut IMPISPGamma) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetGamma(gamma: *mut IMPISPGamma) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAeComp(comp: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeComp(comp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeLuma(luma: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const isp_core_expr_mode_ISP_CORE_EXPR_MODE_AUTO: isp_core_expr_mode = 0;
pub const isp_core_expr_mode_ISP_CORE_EXPR_MODE_MANUAL: isp_core_expr_mode = 1;
pub type isp_core_expr_mode = ::std::os::raw::c_uint;
pub const isp_core_expr_unit_ISP_CORE_EXPR_UNIT_LINE: isp_core_expr_unit = 0;
pub const isp_core_expr_unit_ISP_CORE_EXPR_UNIT_US: isp_core_expr_unit = 1;
pub type isp_core_expr_unit = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union isp_core_expr_attr {
    pub s_attr: isp_core_expr_attr__bindgen_ty_1,
    pub g_attr: isp_core_expr_attr__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_expr_attr__bindgen_ty_1 {
    pub mode: isp_core_expr_mode,
    pub unit: isp_core_expr_unit,
    pub time: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_expr_attr__bindgen_ty_2 {
    pub mode: isp_core_expr_mode,
    pub integration_time: u16,
    pub integration_time_min: u16,
    pub integration_time_max: u16,
    pub one_line_expr_in_us: u16,
}
pub type IMPISPExpr = isp_core_expr_attr;
extern "C" {
    pub fn IMP_ISP_Tuning_SetExpr(expr: *mut IMPISPExpr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetExpr(expr: *mut IMPISPExpr) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union isp_core_ae_roi_select {
    pub __bindgen_anon_1: isp_core_ae_roi_select__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_ae_roi_select__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl isp_core_ae_roi_select__bindgen_ty_1 {
    #[inline]
    pub fn endy(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_endy(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn endx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_endx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn starty(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_starty(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn startx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_startx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        endy: ::std::os::raw::c_uint,
        endx: ::std::os::raw::c_uint,
        starty: ::std::os::raw::c_uint,
        startx: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let endy: u32 = unsafe { ::std::mem::transmute(endy) };
            endy as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let endx: u32 = unsafe { ::std::mem::transmute(endx) };
            endx as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let starty: u32 = unsafe { ::std::mem::transmute(starty) };
            starty as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let startx: u32 = unsafe { ::std::mem::transmute(startx) };
            startx as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMPISPAERoi = isp_core_ae_roi_select;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_AUTO: isp_core_wb_mode = 0;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_MANUAL: isp_core_wb_mode = 1;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_DAY_LIGHT: isp_core_wb_mode = 2;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_CLOUDY: isp_core_wb_mode = 3;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_INCANDESCENT: isp_core_wb_mode = 4;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_FLOURESCENT: isp_core_wb_mode = 5;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_TWILIGHT: isp_core_wb_mode = 6;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_SHADE: isp_core_wb_mode = 7;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_WARM_FLOURESCENT: isp_core_wb_mode = 8;
pub const isp_core_wb_mode_ISP_CORE_WB_MODE_CUSTOM: isp_core_wb_mode = 9;
pub type isp_core_wb_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_wb_attr {
    pub mode: isp_core_wb_mode,
    pub rgain: u16,
    pub bgain: u16,
}
pub type IMPISPWB = isp_core_wb_attr;
extern "C" {
    pub fn IMP_ISP_Tuning_SetWB(wb: *mut IMPISPWB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetWB(wb: *mut IMPISPWB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetWB_Statis(wb: *mut IMPISPWB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetWB_GOL_Statis(wb: *mut IMPISPWB) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_rgb_coefft_wb_attr {
    pub rgb_coefft_wb_r: ::std::os::raw::c_ushort,
    pub rgb_coefft_wb_g: ::std::os::raw::c_ushort,
    pub rgb_coefft_wb_b: ::std::os::raw::c_ushort,
}
pub type IMPISPCOEFFTWB = isp_core_rgb_coefft_wb_attr;
extern "C" {
    pub fn IMP_ISP_Tuning_Awb_GetRgbCoefft(
        isp_core_rgb_coefft_wb_attr: *mut IMPISPCOEFFTWB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_Awb_SetRgbCoefft(
        isp_core_rgb_coefft_wb_attr: *mut IMPISPCOEFFTWB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetMaxAgain(gain: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetMaxAgain(gain: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetMaxDgain(gain: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetMaxDgain(gain: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetVideoDrop(
        cb: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetHiLightDepress(strength: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetHiLightDepress(strength: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetTemperStrength(ratio: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetSinterStrength(ratio: u32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPEVAttr {
    pub ev: u32,
    pub expr_us: u32,
    pub ev_log2: u32,
    pub again: u32,
    pub dgain: u32,
    pub gain_log2: u32,
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetEVAttr(attr: *mut IMPISPEVAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_EnableMovestate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_DisableMovestate() -> ::std::os::raw::c_int;
}
pub const IMPISPTuningMode_IMPISP_TUNING_MODE_AUTO: IMPISPTuningMode = 0;
pub const IMPISPTuningMode_IMPISP_TUNING_MODE_MANUAL: IMPISPTuningMode = 1;
pub const IMPISPTuningMode_IMPISP_TUNING_MODE_RANGE: IMPISPTuningMode = 2;
pub const IMPISPTuningMode_IMPISP_TUNING_MODE_BUTT: IMPISPTuningMode = 3;
pub type IMPISPTuningMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPWeight {
    pub weight: [[::std::os::raw::c_uchar; 15usize]; 15usize],
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAeWeight(ae_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeWeight(ae_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_AE_GetROI(roi_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_AE_SetROI(roi_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAwbWeight(awb_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAwbWeight(awb_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPAWBZone {
    pub zone_r: [::std::os::raw::c_uchar; 225usize],
    pub zone_g: [::std::os::raw::c_uchar; 225usize],
    pub zone_b: [::std::os::raw::c_uchar; 225usize],
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAwbZone(awb_zone: *mut IMPISPAWBZone) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPAEHist {
    pub ae_histhresh: [::std::os::raw::c_uchar; 4usize],
    pub ae_hist: [::std::os::raw::c_ushort; 5usize],
    pub ae_stat_nodeh: ::std::os::raw::c_uchar,
    pub ae_stat_nodev: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPAEHistOrigin {
    pub ae_hist: [::std::os::raw::c_uint; 256usize],
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAeHist(ae_hist: *mut IMPISPAEHist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeHist(ae_hist: *mut IMPISPAEHist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeHist_Origin(
        ae_hist: *mut IMPISPAEHistOrigin,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_awb_sta_info {
    pub r_gain: ::std::os::raw::c_ushort,
    pub b_gain: ::std::os::raw::c_ushort,
    pub awb_sum: ::std::os::raw::c_uint,
}
pub const isp_core_awb_stats_mode_IMPISP_AWB_STATS_LEGACY_MODE: isp_core_awb_stats_mode = 0;
pub const isp_core_awb_stats_mode_IMPISP_AWB_STATS_CURRENT_MODE: isp_core_awb_stats_mode = 1;
pub const isp_core_awb_stats_mode_IMPISP_AWB_STATS_MODE_BUTT: isp_core_awb_stats_mode = 2;
pub type isp_core_awb_stats_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPAWBHist {
    pub awb_stat: isp_core_awb_sta_info,
    pub awb_stats_mode: isp_core_awb_stats_mode,
    pub awb_whitelevel: ::std::os::raw::c_ushort,
    pub awb_blacklevel: ::std::os::raw::c_ushort,
    pub cr_ref_max: ::std::os::raw::c_ushort,
    pub cr_ref_min: ::std::os::raw::c_ushort,
    pub cb_ref_max: ::std::os::raw::c_ushort,
    pub cb_ref_min: ::std::os::raw::c_ushort,
    pub awb_stat_nodeh: ::std::os::raw::c_uchar,
    pub awb_stat_nodev: ::std::os::raw::c_uchar,
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAwbHist(awb_hist: *mut IMPISPAWBHist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAwbHist(awb_hist: *mut IMPISPAWBHist) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct isp_core_af_sta_info {
    pub af_metrics: ::std::os::raw::c_uint,
    pub af_metrics_alt: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPAFHist {
    pub af_stat: isp_core_af_sta_info,
    pub af_enable: ::std::os::raw::c_uchar,
    pub af_metrics_shift: ::std::os::raw::c_uchar,
    pub af_delta: ::std::os::raw::c_ushort,
    pub af_theta: ::std::os::raw::c_ushort,
    pub af_hilight_th: ::std::os::raw::c_ushort,
    pub af_alpha_alt: ::std::os::raw::c_ushort,
    pub af_hstart: ::std::os::raw::c_uchar,
    pub af_vstart: ::std::os::raw::c_uchar,
    pub af_stat_nodeh: ::std::os::raw::c_uchar,
    pub af_stat_nodev: ::std::os::raw::c_uchar,
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAFMetrices(
        metric: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAfHist(af_hist: *mut IMPISPAFHist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAfHist(af_hist: *mut IMPISPAFHist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAfWeight(af_weigh: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAfWeight(af_weight: *mut IMPISPWeight) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPWaitFrameAttr {
    pub timeout: u32,
    pub cnt: u64,
}
extern "C" {
    pub fn IMP_ISP_Tuning_WaitFrame(attr: *mut IMPISPWaitFrameAttr) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPAEMin {
    pub min_it: ::std::os::raw::c_uint,
    pub min_again: ::std::os::raw::c_uint,
    pub min_it_short: ::std::os::raw::c_uint,
    pub min_again_short: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAeMin(ae_min: *mut IMPISPAEMin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeMin(ae_min: *mut IMPISPAEMin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetAe_IT_MAX(it_max: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAE_IT_MAX(
        it_max: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPZone {
    pub zone: [[::std::os::raw::c_uint; 15usize]; 15usize],
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetAeZone(ae_zone: *mut IMPISPZone) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPISPModuleCtl {
    pub key: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: IMPISPModuleCtl__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPModuleCtl__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl IMPISPModuleCtl__bindgen_ty_1 {
    #[inline]
    pub fn bitBypassBLC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassBLC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassGIB(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassGIB(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassAG(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassAG(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassWDR(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassWDR(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDPC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassDPC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassRDNS(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassRDNS(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassLSC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassLSC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassADR(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassADR(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDMSC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassDMSC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCCM(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassCCM(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassGAMMA(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassGAMMA(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDEFOG(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassDEFOG(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCSC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassCSC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCLM(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassCLM(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassSP(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassSP(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassYDNS(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassYDNS(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassBCSH(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassBCSH(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassSDNS(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassSDNS(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassHLDC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassHLDC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitRsv(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_bitRsv(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassMDNS(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitBypassMDNS(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bitBypassBLC: ::std::os::raw::c_uint,
        bitBypassGIB: ::std::os::raw::c_uint,
        bitBypassAG: ::std::os::raw::c_uint,
        bitBypassWDR: ::std::os::raw::c_uint,
        bitBypassDPC: ::std::os::raw::c_uint,
        bitBypassRDNS: ::std::os::raw::c_uint,
        bitBypassLSC: ::std::os::raw::c_uint,
        bitBypassADR: ::std::os::raw::c_uint,
        bitBypassDMSC: ::std::os::raw::c_uint,
        bitBypassCCM: ::std::os::raw::c_uint,
        bitBypassGAMMA: ::std::os::raw::c_uint,
        bitBypassDEFOG: ::std::os::raw::c_uint,
        bitBypassCSC: ::std::os::raw::c_uint,
        bitBypassCLM: ::std::os::raw::c_uint,
        bitBypassSP: ::std::os::raw::c_uint,
        bitBypassYDNS: ::std::os::raw::c_uint,
        bitBypassBCSH: ::std::os::raw::c_uint,
        bitBypassSDNS: ::std::os::raw::c_uint,
        bitBypassHLDC: ::std::os::raw::c_uint,
        bitRsv: ::std::os::raw::c_uint,
        bitBypassMDNS: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bitBypassBLC: u32 = unsafe { ::std::mem::transmute(bitBypassBLC) };
            bitBypassBLC as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bitBypassGIB: u32 = unsafe { ::std::mem::transmute(bitBypassGIB) };
            bitBypassGIB as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bitBypassAG: u32 = unsafe { ::std::mem::transmute(bitBypassAG) };
            bitBypassAG as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bitBypassWDR: u32 = unsafe { ::std::mem::transmute(bitBypassWDR) };
            bitBypassWDR as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bitBypassDPC: u32 = unsafe { ::std::mem::transmute(bitBypassDPC) };
            bitBypassDPC as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bitBypassRDNS: u32 = unsafe { ::std::mem::transmute(bitBypassRDNS) };
            bitBypassRDNS as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bitBypassLSC: u32 = unsafe { ::std::mem::transmute(bitBypassLSC) };
            bitBypassLSC as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bitBypassADR: u32 = unsafe { ::std::mem::transmute(bitBypassADR) };
            bitBypassADR as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bitBypassDMSC: u32 = unsafe { ::std::mem::transmute(bitBypassDMSC) };
            bitBypassDMSC as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bitBypassCCM: u32 = unsafe { ::std::mem::transmute(bitBypassCCM) };
            bitBypassCCM as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bitBypassGAMMA: u32 = unsafe { ::std::mem::transmute(bitBypassGAMMA) };
            bitBypassGAMMA as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bitBypassDEFOG: u32 = unsafe { ::std::mem::transmute(bitBypassDEFOG) };
            bitBypassDEFOG as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bitBypassCSC: u32 = unsafe { ::std::mem::transmute(bitBypassCSC) };
            bitBypassCSC as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bitBypassCLM: u32 = unsafe { ::std::mem::transmute(bitBypassCLM) };
            bitBypassCLM as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bitBypassSP: u32 = unsafe { ::std::mem::transmute(bitBypassSP) };
            bitBypassSP as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bitBypassYDNS: u32 = unsafe { ::std::mem::transmute(bitBypassYDNS) };
            bitBypassYDNS as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let bitBypassBCSH: u32 = unsafe { ::std::mem::transmute(bitBypassBCSH) };
            bitBypassBCSH as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let bitBypassSDNS: u32 = unsafe { ::std::mem::transmute(bitBypassSDNS) };
            bitBypassSDNS as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let bitBypassHLDC: u32 = unsafe { ::std::mem::transmute(bitBypassHLDC) };
            bitBypassHLDC as u64
        });
        __bindgen_bitfield_unit.set(19usize, 12u8, {
            let bitRsv: u32 = unsafe { ::std::mem::transmute(bitRsv) };
            bitRsv as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let bitBypassMDNS: u32 = unsafe { ::std::mem::transmute(bitBypassMDNS) };
            bitBypassMDNS as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetModuleControl(
        ispmodule: *mut IMPISPModuleCtl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetModuleControl(
        ispmodule: *mut IMPISPModuleCtl,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPFrontCrop {
    pub fcrop_enable: bool,
    pub fcrop_top: ::std::os::raw::c_uint,
    pub fcrop_left: ::std::os::raw::c_uint,
    pub fcrop_width: ::std::os::raw::c_uint,
    pub fcrop_height: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetFrontCrop(ispfrontcrop: *mut IMPISPFrontCrop)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetFrontCrop(ispfrontcrop: *mut IMPISPFrontCrop)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_WDR_ENABLE(mode: IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetDPC_Strength(ratio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetDPC_Strength(
        ratio: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetDRC_Strength(ratio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetDRC_Strength(
        ratio: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const IMPISPHVFLIP_IMPISP_FLIP_NORMAL_MODE: IMPISPHVFLIP = 0;
pub const IMPISPHVFLIP_IMPISP_FLIP_H_MODE: IMPISPHVFLIP = 1;
pub const IMPISPHVFLIP_IMPISP_FLIP_V_MODE: IMPISPHVFLIP = 2;
pub const IMPISPHVFLIP_IMPISP_FLIP_HV_MODE: IMPISPHVFLIP = 3;
pub const IMPISPHVFLIP_IMPISP_FLIP_MODE_BUTT: IMPISPHVFLIP = 4;
pub type IMPISPHVFLIP = ::std::os::raw::c_uint;
extern "C" {
    pub fn IMP_ISP_Tuning_SetHVFLIP(hvflip: IMPISPHVFLIP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetHVFlip(hvflip: *mut IMPISPHVFLIP) -> ::std::os::raw::c_int;
}
pub const IMPISP_MASK_TYPE_IMPISP_MASK_TYPE_RGB: IMPISP_MASK_TYPE = 0;
pub const IMPISP_MASK_TYPE_IMPISP_MASK_TYPE_YUV: IMPISP_MASK_TYPE = 1;
pub type IMPISP_MASK_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union mask_value {
    pub mask_rgb: mask_value__bindgen_ty_1,
    pub mask_ayuv: mask_value__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mask_value__bindgen_ty_1 {
    pub Red: ::std::os::raw::c_uchar,
    pub Green: ::std::os::raw::c_uchar,
    pub Blue: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mask_value__bindgen_ty_2 {
    pub y_value: ::std::os::raw::c_uchar,
    pub u_value: ::std::os::raw::c_uchar,
    pub v_value: ::std::os::raw::c_uchar,
}
pub type IMP_ISP_MASK_VALUE = mask_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct isp_mask_block_par {
    pub mask_en: ::std::os::raw::c_uchar,
    pub mask_pos_top: ::std::os::raw::c_ushort,
    pub mask_pos_left: ::std::os::raw::c_ushort,
    pub mask_width: ::std::os::raw::c_ushort,
    pub mask_height: ::std::os::raw::c_ushort,
    pub mask_value: IMP_ISP_MASK_VALUE,
}
pub type IMPISP_MASK_BLOCK_PAR = isp_mask_block_par;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPISPMASKAttr {
    pub chn0: [IMPISP_MASK_BLOCK_PAR; 4usize],
    pub chn1: [IMPISP_MASK_BLOCK_PAR; 4usize],
    pub chn2: [IMPISP_MASK_BLOCK_PAR; 4usize],
    pub mask_type: IMPISP_MASK_TYPE,
}
extern "C" {
    pub fn IMP_ISP_Tuning_SetMask(mask: *mut IMPISPMASKAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetMask(mask: *mut IMPISPMASKAttr) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPISPSENSORAttr {
    pub hts: ::std::os::raw::c_uint,
    pub vts: ::std::os::raw::c_uint,
    pub fps: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn IMP_ISP_Tuning_GetSensorAttr(attr: *mut IMPISPSENSORAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_EnableDRC(mode: IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_ISP_Tuning_EnableDefog(mode: IMPISPTuningOpsMode) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPIVSInterface {
    pub param: *mut ::std::os::raw::c_void,
    pub paramSize: ::std::os::raw::c_int,
    pub pixfmt: IMPPixelFormat,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(inf: *mut IMPIVSInterface) -> ::std::os::raw::c_int,
    >,
    pub exit: ::std::option::Option<unsafe extern "C" fn(inf: *mut IMPIVSInterface)>,
    pub preProcessSync: ::std::option::Option<
        unsafe extern "C" fn(
            inf: *mut IMPIVSInterface,
            frame: *mut IMPFrameInfo,
        ) -> ::std::os::raw::c_int,
    >,
    pub processAsync: ::std::option::Option<
        unsafe extern "C" fn(
            inf: *mut IMPIVSInterface,
            frame: *mut IMPFrameInfo,
        ) -> ::std::os::raw::c_int,
    >,
    pub getResult: ::std::option::Option<
        unsafe extern "C" fn(
            inf: *mut IMPIVSInterface,
            result: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub releaseResult: ::std::option::Option<
        unsafe extern "C" fn(
            inf: *mut IMPIVSInterface,
            result: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub getParam: ::std::option::Option<
        unsafe extern "C" fn(
            inf: *mut IMPIVSInterface,
            param: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub setParam: ::std::option::Option<
        unsafe extern "C" fn(
            inf: *mut IMPIVSInterface,
            param: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub flushFrame: ::std::option::Option<
        unsafe extern "C" fn(inf: *mut IMPIVSInterface) -> ::std::os::raw::c_int,
    >,
    pub priv_: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn IMP_IVS_CreateGroup(GrpNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_DestroyGroup(GrpNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_CreateChn(
        ChnNum: ::std::os::raw::c_int,
        handler: *mut IMPIVSInterface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_DestroyChn(ChnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_RegisterChn(
        GrpNum: ::std::os::raw::c_int,
        ChnNum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_UnRegisterChn(ChnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_StartRecvPic(ChnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_StopRecvPic(ChnNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_PollingResult(
        ChnNum: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_GetResult(
        ChnNum: ::std::os::raw::c_int,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_ReleaseResult(
        ChnNum: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_ReleaseData(vaddr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_GetParam(
        chnNum: ::std::os::raw::c_int,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_IVS_SetParam(
        chnNum: ::std::os::raw::c_int,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct IMP_IVS_BaseMoveParam {
    pub skipFrameCnt: ::std::os::raw::c_int,
    pub referenceNum: ::std::os::raw::c_int,
    pub sadMode: ::std::os::raw::c_int,
    pub sense: ::std::os::raw::c_int,
    pub frameInfo: IMPFrameInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMP_IVS_BaseMoveOutput {
    pub ret: ::std::os::raw::c_int,
    pub data: *mut u8,
    pub datalen: ::std::os::raw::c_int,
    pub timeStamp: i64,
}
extern "C" {
    pub fn IMP_IVS_CreateBaseMoveInterface(
        param: *mut IMP_IVS_BaseMoveParam,
    ) -> *mut IMPIVSInterface;
}
extern "C" {
    pub fn IMP_IVS_DestroyBaseMoveInterface(moveInterface: *mut IMPIVSInterface);
}
#[repr(C)]
#[derive(Debug)]
pub struct IMP_IVS_MoveParam {
    pub sense: [::std::os::raw::c_int; 52usize],
    pub skipFrameCnt: ::std::os::raw::c_int,
    pub frameInfo: IMPFrameInfo,
    pub roiRect: [IMPRect; 52usize],
    pub roiRectCnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMP_IVS_MoveOutput {
    pub retRoi: [::std::os::raw::c_int; 52usize],
}
extern "C" {
    pub fn IMP_IVS_CreateMoveInterface(param: *mut IMP_IVS_MoveParam) -> *mut IMPIVSInterface;
}
extern "C" {
    pub fn IMP_IVS_DestroyMoveInterface(moveInterface: *mut IMPIVSInterface);
}
pub const IMP_LOG_LEVEL_UNKNOWN: _bindgen_ty_11 = 0;
pub const IMP_LOG_LEVEL_RESERVED: _bindgen_ty_11 = 1;
pub const IMP_LOG_LEVEL_VERBOSE: _bindgen_ty_11 = 2;
pub const IMP_LOG_LEVEL_DEBUG: _bindgen_ty_11 = 3;
pub const IMP_LOG_LEVEL_INFO: _bindgen_ty_11 = 4;
pub const IMP_LOG_LEVEL_WARN: _bindgen_ty_11 = 5;
pub const IMP_LOG_LEVEL_ERROR: _bindgen_ty_11 = 6;
pub const IMP_LOG_LEVEL_FATAL: _bindgen_ty_11 = 7;
pub const IMP_LOG_LEVEL_SILENT: _bindgen_ty_11 = 8;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
extern "C" {
    pub fn imp_log_fun(
        le: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        out: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn IMP_Log_Set_Option(op: ::std::os::raw::c_int);
}
extern "C" {
    pub fn IMP_Log_Get_Option() -> ::std::os::raw::c_int;
}
pub type IMPRgnHandle = ::std::os::raw::c_int;
pub const IMPOsdColour_OSD_BLACK: IMPOsdColour = 4278190080;
pub const IMPOsdColour_OSD_WHITE: IMPOsdColour = 4294967295;
pub const IMPOsdColour_OSD_RED: IMPOsdColour = 4294901760;
pub const IMPOsdColour_OSD_GREEN: IMPOsdColour = 4278255360;
pub const IMPOsdColour_OSD_BLUE: IMPOsdColour = 4278190335;
pub type IMPOsdColour = ::std::os::raw::c_uint;
pub const IMPOsdRgnType_OSD_REG_INV: IMPOsdRgnType = 0;
pub const IMPOsdRgnType_OSD_REG_LINE: IMPOsdRgnType = 1;
pub const IMPOsdRgnType_OSD_REG_RECT: IMPOsdRgnType = 2;
pub const IMPOsdRgnType_OSD_REG_BITMAP: IMPOsdRgnType = 3;
pub const IMPOsdRgnType_OSD_REG_COVER: IMPOsdRgnType = 4;
pub const IMPOsdRgnType_OSD_REG_PIC: IMPOsdRgnType = 5;
pub const IMPOsdRgnType_OSD_REG_PIC_RMEM: IMPOsdRgnType = 6;
pub type IMPOsdRgnType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lineRectData {
    pub color: u32,
    pub linewidth: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct coverData {
    pub color: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct picData {
    pub pData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPOSDRgnAttrData {
    pub bitmapData: *mut ::std::os::raw::c_void,
    pub lineRectData: lineRectData,
    pub coverData: coverData,
    pub picData: picData,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPOSDRgnAttr {
    pub type_: IMPOsdRgnType,
    pub rect: IMPRect,
    pub fmt: IMPPixelFormat,
    pub data: IMPOSDRgnAttrData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPOSDRgnTimestamp {
    pub ts: u64,
    pub minus: u64,
    pub plus: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPOSDGrpRgnAttr {
    pub show: ::std::os::raw::c_int,
    pub offPos: IMPPoint,
    pub scalex: f32,
    pub scaley: f32,
    pub gAlphaEn: ::std::os::raw::c_int,
    pub fgAlhpa: ::std::os::raw::c_int,
    pub bgAlhpa: ::std::os::raw::c_int,
    pub layer: ::std::os::raw::c_int,
}
extern "C" {
    pub fn IMP_OSD_CreateGroup(grpNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_DestroyGroup(grpNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_AttachToGroup(from: *mut IMPCell, to: *mut IMPCell) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_CreateRgn(prAttr: *mut IMPOSDRgnAttr) -> IMPRgnHandle;
}
extern "C" {
    pub fn IMP_OSD_DestroyRgn(handle: IMPRgnHandle);
}
extern "C" {
    pub fn IMP_OSD_RegisterRgn(
        handle: IMPRgnHandle,
        grpNum: ::std::os::raw::c_int,
        pgrAttr: *mut IMPOSDGrpRgnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_UnRegisterRgn(
        handle: IMPRgnHandle,
        grpNum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_SetRgnAttr(
        handle: IMPRgnHandle,
        prAttr: *mut IMPOSDRgnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_SetRgnAttrWithTimestamp(
        handle: IMPRgnHandle,
        prAttr: *mut IMPOSDRgnAttr,
        prTs: *mut IMPOSDRgnTimestamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_GetRgnAttr(
        handle: IMPRgnHandle,
        prAttr: *mut IMPOSDRgnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_UpdateRgnAttrData(
        handle: IMPRgnHandle,
        prAttrData: *mut IMPOSDRgnAttrData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_SetGrpRgnAttr(
        handle: IMPRgnHandle,
        grpNum: ::std::os::raw::c_int,
        pgrAttr: *mut IMPOSDGrpRgnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_GetGrpRgnAttr(
        handle: IMPRgnHandle,
        grpNum: ::std::os::raw::c_int,
        pgrAttr: *mut IMPOSDGrpRgnAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_ShowRgn(
        handle: IMPRgnHandle,
        grpNum: ::std::os::raw::c_int,
        showFlag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_Start(grpNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_OSD_Stop(grpNum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMPVersion {
    pub aVersion: [::std::os::raw::c_char; 64usize],
}
extern "C" {
    pub fn IMP_System_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_System_Exit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_System_GetTimeStamp() -> i64;
}
extern "C" {
    pub fn IMP_System_RebaseTimeStamp(basets: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_System_ReadReg32(regAddr: u32) -> u32;
}
extern "C" {
    pub fn IMP_System_WriteReg32(regAddr: u32, value: u32);
}
extern "C" {
    pub fn IMP_System_GetVersion(pstVersion: *mut IMPVersion) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_System_GetCPUInfo() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn IMP_System_Bind(srcCell: *mut IMPCell, dstCell: *mut IMPCell) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_System_UnBind(srcCell: *mut IMPCell, dstCell: *mut IMPCell)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMP_System_GetBindbyDest(
        dstCell: *mut IMPCell,
        srcCell: *mut IMPCell,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IMPPixfmtToString(pixfmt: IMPPixelFormat) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SU_ADC_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_ADC_Exit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_ADC_EnableChn(chn_num: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_ADC_DisableChn(chn_num: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_ADC_GetChnValue(
        chn_num: u32,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SUModelNum {
    pub chr: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SUVersion {
    pub chr: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SUDevID {
    pub chr: [::std::os::raw::c_char; 64usize],
    pub hex: [u8; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SUTime {
    pub sec: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub mday: ::std::os::raw::c_int,
    pub mon: ::std::os::raw::c_int,
    pub year: ::std::os::raw::c_int,
}
extern "C" {
    pub fn SU_Base_GetModelNumber(modelNum: *mut SUModelNum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_GetVersion(version: *mut SUVersion) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_GetDevID(devID: *mut SUDevID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_GetTime(time: *mut SUTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_SetTime(time: *mut SUTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_SUTime2Raw(suTime: *mut SUTime, rawTime: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_Raw2SUTime(rawTime: *mut u32, suTime: *mut SUTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_SetAlarm(time: *mut SUTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_GetAlarm(time: *mut SUTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_EnableAlarm() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_DisableAlarm() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_PollingAlarm(timeoutMsec: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_Shutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_Reboot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Base_Suspend() -> ::std::os::raw::c_int;
}
pub const SUBatStatus_Unknown: SUBatStatus = -1;
pub const SUBatStatus_Charging: SUBatStatus = 0;
pub const SUBatStatus_Discharging: SUBatStatus = 1;
pub const SUBatStatus_Full: SUBatStatus = 2;
pub type SUBatStatus = ::std::os::raw::c_int;
pub const SUBatEvent_AC_ONLINE: SUBatEvent = 0;
pub const SUBatEvent_AC_OFFLINE: SUBatEvent = 1;
pub const SUBatEvent_USB_ONLINE: SUBatEvent = 2;
pub const SUBatEvent_USB_OFFLINE: SUBatEvent = 3;
pub type SUBatEvent = ::std::os::raw::c_uint;
extern "C" {
    pub fn SU_Battery_GetStatus(status: *mut SUBatStatus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Battery_GetEvent(event: *mut SUBatEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Battery_GetCapacity() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Battery_GetVoltageUV() -> ::std::os::raw::c_int;
}
pub const IN_UNF_CIPHER_ALG_E_IN_UNF_CIPHER_ALG_AES: IN_UNF_CIPHER_ALG_E = 0;
pub const IN_UNF_CIPHER_ALG_E_IN_UNF_CIPHER_ALG_DES: IN_UNF_CIPHER_ALG_E = 1;
pub type IN_UNF_CIPHER_ALG_E = ::std::os::raw::c_uint;
pub use self::IN_UNF_CIPHER_ALG_E as IN_UNF_CIPHER_ALG;
pub const IN_UNF_CIPHER_WORK_MODE_E_IN_UNF_CIPHER_WORK_MODE_ECB: IN_UNF_CIPHER_WORK_MODE_E = 0;
pub const IN_UNF_CIPHER_WORK_MODE_E_IN_UNF_CIPHER_WORK_MODE_CBC: IN_UNF_CIPHER_WORK_MODE_E = 1;
pub const IN_UNF_CIPHER_WORK_MODE_E_IN_UNF_CIPHER_WORK_MODE_OTHER: IN_UNF_CIPHER_WORK_MODE_E = 2;
pub type IN_UNF_CIPHER_WORK_MODE_E = ::std::os::raw::c_uint;
pub use self::IN_UNF_CIPHER_WORK_MODE_E as IN_UNF_CIPHER_WORK_MODE;
pub const IN_UNF_CIPHER_KEY_LENGTH_E_IN_UNF_CIPHER_KEY_AES_128BIT: IN_UNF_CIPHER_KEY_LENGTH_E = 0;
pub type IN_UNF_CIPHER_KEY_LENGTH_E = ::std::os::raw::c_uint;
pub use self::IN_UNF_CIPHER_KEY_LENGTH_E as IN_UNF_CIPHER_KEY_LENGTH;
pub const IN_UNF_CIPHER_BIT_WIDTH_E_IN_UNF_CIPHER_BIT_WIDTH_128BIT: IN_UNF_CIPHER_BIT_WIDTH_E = 0;
pub type IN_UNF_CIPHER_BIT_WIDTH_E = ::std::os::raw::c_uint;
pub use self::IN_UNF_CIPHER_BIT_WIDTH_E as IN_UNF_CIPHER_BIT_WIDTH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IN_UNF_CIPHER_CTRL_S {
    pub key: [::std::os::raw::c_uint; 4usize],
    pub IV: [::std::os::raw::c_uint; 4usize],
    pub enDataLen: ::std::os::raw::c_uint,
    pub enAlg: IN_UNF_CIPHER_ALG,
    pub enBitWidth: IN_UNF_CIPHER_BIT_WIDTH,
    pub enWorkMode: IN_UNF_CIPHER_WORK_MODE,
    pub enKeyLen: IN_UNF_CIPHER_KEY_LENGTH,
}
pub type IN_UNF_CIPHER_CTRL = IN_UNF_CIPHER_CTRL_S;
extern "C" {
    pub fn SU_CIPHER_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_DES_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_Exit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_DES_Exit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_DES_Test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_CreateHandle() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_DestroyHandle(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_ConfigHandle(
        hCipher: ::std::os::raw::c_int,
        Ctrl: *mut IN_UNF_CIPHER_CTRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_Encrypt(
        hCipher: ::std::os::raw::c_int,
        srcAddr: *mut ::std::os::raw::c_uint,
        dstAddr: *mut ::std::os::raw::c_uint,
        dataLen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_CIPHER_Decrypt(
        hCipher: ::std::os::raw::c_int,
        srcAddr: *mut ::std::os::raw::c_uint,
        dstAddr: *mut ::std::os::raw::c_uint,
        dataLen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const SUKeyEvent_KEY_RELEASED: SUKeyEvent = 0;
pub const SUKeyEvent_KEY_PRESSED: SUKeyEvent = 1;
pub type SUKeyEvent = ::std::os::raw::c_uint;
pub const SULedCmd_LED_OFF: SULedCmd = 0;
pub const SULedCmd_LED_ON: SULedCmd = 1;
pub type SULedCmd = ::std::os::raw::c_uint;
extern "C" {
    pub fn SU_Key_OpenEvent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Key_CloseEvent(evfd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Key_ReadEvent(
        evfd: ::std::os::raw::c_int,
        keyCode: *mut ::std::os::raw::c_int,
        event: *mut SUKeyEvent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Key_DisableEvent(keyCode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_Key_EnableEvent(keyCode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SU_LED_Command(ledNum: ::std::os::raw::c_int, cmd: SULedCmd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
